<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="snop.bizKpi">
	<select id="bizPerformFcstSelect" parameterType="map" resultType="map">
		/****** [ snop.bizKpi.bizPerformFcstSelect ] ******/
		#set( $monthArr = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'] )
	
		BEGIN
		    DECLARE @P_PRE_YEAR    NVARCHAR (4) = LEFT (CONVERT (NVARCHAR (30), DATEADD (YEAR, -1, DBO.UFN_GETDATE()), 112), 4);
		    DECLARE @P_CUR_YEAR    NVARCHAR (4) = LEFT (CONVERT (NVARCHAR (30), DBO.UFN_GETDATE(), 112), 4);
		    DECLARE @P_CUR_MONTH   NVARCHAR (4) = SUBSTRING (CONVERT (NVARCHAR (30), DBO.UFN_GETDATE(), 112), 5, 2);
		    DECLARE @P_PRE_SAT_DAY NVARCHAR (8);
		    DECLARE @P_CUR_PWEEK   NVARCHAR (7);
		    DECLARE @P_MON_PWEEK   NVARCHAR (7);
		    
		    DECLARE @P_ACT_MONTH   NVARCHAR (6); 
		    DECLARE @P_ACT_PWEEK   NVARCHAR (6);
		    
		    SELECT @P_ACT_MONTH = MAX (YEARMONTH)
		         , @P_ACT_PWEEK = MAX (YEARPWEEK) 
		    FROM TB_KPI_ACTION_PLAN 
		    WHERE MEAS_CD = 'CFM_SP';
		     
		    IF @P_ACT_MONTH > @P_CUR_YEAR + '12'
		    	BEGIN
			        SET @P_ACT_MONTH = @P_CUR_YEAR + '12';
			        SET @P_ACT_PWEEK = (SELECT MAX(YEARPWEEK) FROM TB_MST_CALENDAR WHERE YEARMONTH = @P_ACT_MONTH);
				END
		    
		    
		    BEGIN
		      	SELECT @P_PRE_SAT_DAY = MAX (YYYYMMDD)
				FROM TB_MST_CALENDAR
		      	WHERE YEARWEEK = (SELECT YEARWEEK
		                          FROM TB_MST_CALENDAR
		                          WHERE YYYYMMDD = (CONVERT (NVARCHAR (30), DATEADD (DAY, -7, DBO.UFN_GETDATE()), 112)));
		
		      	SELECT @P_CUR_PWEEK = MIN (YEARPWEEK)
		        FROM TB_MST_CALENDAR
		       	WHERE YYYYMMDD = (CONVERT (NVARCHAR (30),  DBO.UFN_GETDATE(), 112));
		       
		       	SELECT @P_MON_PWEEK = MAX (YEARPWEEK) 
		        FROM TB_MST_CALENDAR
		        WHERE YEARMONTH = LEFT (CONVERT (NVARCHAR (30), DBO.UFN_GETDATE(), 112), 6);
		    END;
		    
		    #set ($curMon = "$_parameter.CUR_MONTH")
		    #set ($actMon = "$_parameter.ACT_MONTH")
			WITH W_CODE AS 
			(
			    #set($_parameter.groupCd = "BU_CD")
			    #set($_parameter.buAllYn = "Y")
			    <include refid="include.mstCode"/>
			), 
			W_CUST AS 
			(
				SELECT CTG.COMPANY_CD
			         , CTG.BU_CD
			         , RCTG.REP_CUST_GROUP_CD
			         , RCTG.REP_CUST_GROUP_NM
			         , CTG.CUST_GROUP_CD
			         , CTG.CUST_GROUP_NM
			         , CTG.SORT
			         , RCTG.SORT SORT2
				FROM TB_MST_CUST_GROUP CTG WITH(NOLOCK)
			    INNER JOIN TB_MST_REP_CUST_GROUP RCTG  WITH(NOLOCK)
			       ON CTG.COMPANY_CD        = RCTG.COMPANY_CD
			      AND CTG.BU_CD             = RCTG.BU_CD
			      AND CTG.REP_CUST_GROUP_CD = RCTG.REP_CUST_GROUP_CD
			      AND RCTG.USE_FLAG         = 'Y'
			      AND RCTG.EXCEPT_YN        = 'N'
			    INNER JOIN TB_MAP_ITEM_CUST_GROUP CT WITH(NOLOCK)
			       ON CTG.COMPANY_CD        = CT.COMPANY_CD
			      AND CTG.BU_CD             = CT.BU_CD
			      AND CTG.CUST_GROUP_CD     = CT.CUST_GROUP_CD
			      AND CT.VALID_FLAG         = 'Y'
			    WHERE CTG.COMPANY_CD        = @{GV_COMPANY_CD}
			      AND CTG.BU_CD             = @{GV_BU_CD}
			      AND CTG.USE_FLAG          = 'Y'
			  GROUP BY CTG.COMPANY_CD, CTG.BU_CD, RCTG.REP_CUST_GROUP_CD, RCTG.REP_CUST_GROUP_NM, CTG.CUST_GROUP_CD, CTG.CUST_GROUP_NM, CTG.SORT, RCTG.SORT 
			), 
			W_RES AS 
			(
			    SELECT A.COMPANY_CD
			         , A.BU_CD
			         , A.CUST_GROUP_CD
			         , A.ITEM_CD
			         , A.M01
			         , A.M02
			         , A.M03
			         , A.M04
			         , A.M05
			         , A.M06
			         , A.M07
			         , A.M08
			         , A.M09
			         , A.M10
			         , A.M11
			         , A.M12
			         , A.FLAG
				FROM 
				(
			    	SELECT BILL.COMPANY_CD
			             , BILL.BU_CD
			             , CT.CUST_GROUP_CD
			             , BILL.ITEM_CD
			             #foreach( $mon in $monthArr )  
			             , SUM (CASE LEFT(BILL_DATE, 6) WHEN @P_PRE_YEAR + '$mon' THEN AMT_KRW ELSE NULL END) AS M$mon
			             #end
			             , 'PRE_BILL' AS FLAG
					FROM TB_DYN_BILL_ORDER BILL WITH(NOLOCK)
			        INNER JOIN TB_MST_CUSTOMER CT WITH(NOLOCK)
			           ON BILL.COMPANY_CD = CT.COMPANY_CD
			          AND BILL.BU_CD      = CT.BU_CD
			          AND BILL.CUST_CD    = CT.CUST_CD
			        WHERE BILL.COMPANY_CD = @{GV_COMPANY_CD}
			          AND BILL.BU_CD      = @{GV_BU_CD}
			          AND BILL.BILL_DATE >= @P_PRE_YEAR + '0101'
			          AND BILL.BILL_DATE <![CDATA[<=]]> @P_PRE_YEAR + '1231'
			          AND BILL.DEL_FLAG = 'N'
			        GROUP BY BILL.COMPANY_CD, BILL.BU_CD, CT.CUST_GROUP_CD, BILL.ITEM_CD
					UNION ALL
			        SELECT COMPANY_CD
			             , BU_CD
			             , CUST_GROUP_CD
			             , ITEM_CD
			             #foreach( $mon in $monthArr )
			             #set($Integer = 0)
			             #set($iMon = $Integer.parseInt($mon))
			             , SUM (M${iMon}_VAL)  AS M$mon
			             #end
			             , 'BIZ_PLAN' FLAG
					FROM TB_DYN_BIZ_PLAN BIZ WITH(NOLOCK)
			        WHERE COMPANY_CD = @{GV_COMPANY_CD}
			          AND BU_CD      = @{GV_BU_CD}
			          AND MEAS_CD    = 'YP_AMT_KRW'
			          AND YEAR       = @P_CUR_YEAR
			        GROUP BY COMPANY_CD, BU_CD, CUST_GROUP_CD, ITEM_CD
					UNION ALL
			        SELECT COMPANY_CD
			             , BU_CD
			             , CUST_GROUP_CD
			             , ITEM_CD
			             #foreach( $mon in $monthArr )  
			             , SUM (CASE YEARMONTH WHEN @P_CUR_YEAR + '$mon' THEN AMT ELSE NULL END) AS M$mon
			             #end
			             , 'ACTION_PLAN' AS FLAG
					FROM TB_KPI_ACTION_PLAN AP WITH(NOLOCK)
			        WHERE COMPANY_CD = @{GV_COMPANY_CD}
			          AND BU_CD      = @{GV_BU_CD}
			          AND YEARMONTH >= @P_CUR_YEAR + '01'
			          AND YEARMONTH <![CDATA[<=]]> @P_ACT_MONTH
			          AND MEAS_CD    = 'CFM_SP'
			        GROUP BY COMPANY_CD, BU_CD, CUST_GROUP_CD, ITEM_CD
					UNION ALL
			        SELECT OD.COMPANY_CD
			             , OD.BU_CD
			             , CT.CUST_GROUP_CD
			             , OD.ITEM_CD
			             #foreach( $mon in $monthArr )  
			             , SUM (CASE LEFT(BILL_DATE, 6) WHEN @P_CUR_YEAR + '$mon' THEN AMT_KRW ELSE NULL END) AS M$mon
			             #end
			             , 'CUR_BILL'  AS FLAG
					FROM TB_DYN_BILL_ORDER OD WITH(NOLOCK)
			        INNER JOIN TB_MST_CUSTOMER CT WITH(NOLOCK)
			           ON OD.COMPANY_CD = CT.COMPANY_CD
			          AND OD.BU_CD      = CT.BU_CD
			          AND OD.CUST_CD    = CT.CUST_CD
			        WHERE OD.COMPANY_CD = @{GV_COMPANY_CD}
			          AND OD.BU_CD      = @{GV_BU_CD}
			          AND OD.BILL_DATE >= @P_CUR_YEAR + '0101'
			          AND OD.BILL_DATE <![CDATA[<=]]> @P_PRE_SAT_DAY
			          AND OD.DEL_FLAG = 'N' 
			        GROUP BY OD.COMPANY_CD, OD.BU_CD, CT.CUST_GROUP_CD, OD.ITEM_CD
			        UNION ALL
			        SELECT COMPANY_CD
			             , BU_CD
			             , CUST_GROUP_CD
			             , ITEM_CD
			             #foreach( $mon in $monthArr )  
			             , SUM (CASE YEARMONTH WHEN @P_CUR_YEAR + '$mon' THEN AMT ELSE NULL END) AS M$mon
			             #end
			             , 'DUMMY_PLAN' AS FLAG
			        FROM TB_KPI_ACTION_PLAN
			        WHERE COMPANY_CD = @{GV_COMPANY_CD}
			          AND BU_CD      = @{GV_BU_CD}
			          AND YEARPWEEK >= @P_CUR_PWEEK
			          AND YEARPWEEK <![CDATA[<=]]> @P_MON_PWEEK
			          AND MEAS_CD    = 'CFM_SP'
			        GROUP BY COMPANY_CD, BU_CD, CUST_GROUP_CD, ITEM_CD
				) A
			   	INNER JOIN TB_MAP_ITEM_CUST_GROUP B WITH(NOLOCK)
			       ON A.COMPANY_CD    = B.COMPANY_CD
			      AND A.BU_CD         = B.BU_CD 
			      AND A.CUST_GROUP_CD = B.CUST_GROUP_CD
			      AND A.ITEM_CD       = B.ITEM_CD
			      AND B.VALID_FLAG    = 'Y'
			)
			SELECT M.BU_CD
			     , BU.CODE_NM  AS BU_NM
			     , M.REP_CUST_GROUP_CD
			     , CASE WHEN M.REP_CUST_GROUP_CD IS NULL THEN 'Total' ELSE M.REP_CUST_GROUP_NM END AS REP_CUST_GROUP_NM
			     , C.CATEGORY_CD AS MEAS_CD
			     , C.CATEGORY_NM AS MEAS_NM
			     , C.CATEGORY_IDX
				#foreach( $mon in $monthArr )
			     , CASE C.CATEGORY_CD
			         WHEN 'SALES_Y' THEN ROUND ( SUM ( M.PRE_M$mon ) / 100000000, 1 )
			         WHEN 'BUSINESS_PLAN' THEN ROUND ( SUM ( M.BIZ_M$mon ) / 100000000, 1 )
			         WHEN 'EXECUTE_PLAN' THEN ROUND ( SUM ( M.ACT_M$mon ) / 100000000, 1 )
			         WHEN 'SALES_AMT' THEN ROUND ( SUM ( M.SALES_M$mon ) / 100000000, 1 )
			         WHEN 'BUSINESS_PLAN_GAP' THEN ROUND ( ( ISNULL ( SUM ( M.SALES_M$mon ), 0 ) - NULLIF ( SUM ( M.BIZ_M$mon ), 0 ) ) / 100000000, 1 )
			         WHEN 'EXECUTE_PLAN_GAP' THEN ROUND ( ( ISNULL ( SUM ( M.SALES_M$mon ), 0 ) - NULLIF ( SUM ( M.ACT_M$mon ), 0 ) ) / 100000000, 1 )
			         WHEN 'BUSINESS_PLAN_RATE' THEN ROUND ( ISNULL ( SUM ( M.SALES_M$mon ), 0 ) / NULLIF ( SUM ( M.BIZ_M$mon ), 0 ) * 100, 1 )
			         WHEN 'EXECUTE_PLAN_RATE' THEN ROUND ( ISNULL ( SUM ( M.SALES_M$mon ), 0 ) / NULLIF ( SUM ( M.ACT_M$mon ), 0 ) * 100, 1 )
			       END AS M$mon
				#end
			    , CASE C.CATEGORY_CD
			        WHEN 'SALES_Y' THEN ROUND ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.PRE_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) / 100000000, 1 )
			        WHEN 'BUSINESS_PLAN' THEN ROUND ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.BIZ_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) / 100000000, 1 )
			        WHEN 'EXECUTE_PLAN' THEN ROUND ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.ACT_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) / 100000000, 1 )
			        WHEN 'SALES_AMT' THEN ROUND ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.SALES_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) / 100000000, 1 )
			        WHEN 'BUSINESS_PLAN_GAP' THEN ROUND ( ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.SALES_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) -
			                    ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.BIZ_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) ) / 100000000, 1 )
			        WHEN 'EXECUTE_PLAN_GAP' THEN ROUND ( ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.SALES_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) -
			                    ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.ACT_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) ) / 100000000, 1 )
			        WHEN 'BUSINESS_PLAN_RATE' THEN ROUND ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.SALES_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) /
			                    NULLIF ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.BIZ_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end, 0 ) * 100, 1 )
			        WHEN 'EXECUTE_PLAN_RATE' THEN ROUND ( ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.SALES_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end ) /
			                    NULLIF ( #foreach( $mon in $monthArr ) ISNULL ( SUM ( M.ACT_M$mon ), 0 ) #if( $foreach.hasNext ) + #end #end, 0 ) * 100, 1 )
			      END AS M_TOT
			FROM 
			(
				SELECT CUST.COMPANY_CD
			         , CUST.BU_CD
			         , CUST.REP_CUST_GROUP_CD
			         , CUST.REP_CUST_GROUP_NM
					#foreach( $mon in $monthArr )
			  		#set($Integer = 0)
			  		#set($iMon = $Integer.parseInt($mon))
			         , SUM (CASE WHEN FLAG = 'PRE_BILL'    THEN M$mon ELSE NULL END) AS PRE_M$mon
			         , SUM (CASE WHEN FLAG = 'BIZ_PLAN'    THEN M$mon ELSE NULL END) AS BIZ_M$mon
			  		#if ($Integer.parseInt($actMon) >= $iMon )
			         , SUM (CASE WHEN FLAG = 'ACTION_PLAN' THEN M$mon ELSE NULL END) AS ACT_M$mon
			  		#else
			         , SUM (CASE WHEN FLAG = 'BIZ_PLAN'    THEN M$mon ELSE NULL END) AS ACT_M$mon
			  		#end
			  		#if ( $Integer.parseInt($curMon) > $iMon )
			     	 , SUM (CASE WHEN FLAG = 'CUR_BILL'    THEN M$mon ELSE NULL END) AS SALES_M$mon
			  		#elseif ( $iMon == $Integer.parseInt($curMon) )
			     	 , SUM ( ISNULL (CASE WHEN FLAG = 'CUR_BILL' THEN M$mon ELSE NULL END, 0) + ISNULL (CASE WHEN FLAG = 'DUMMY_PLAN' THEN M$mon ELSE NULL END, 0)) AS SALES_M$mon
			  		#elseif ( $iMon > $Integer.parseInt($actMon) )
			     	 , SUM (CASE WHEN FLAG = 'BIZ_PLAN'    THEN M$mon ELSE NULL END) AS SALES_M$mon
			  		#else
			     	 , SUM (CASE WHEN FLAG = 'ACTION_PLAN' THEN M$mon ELSE NULL END) AS SALES_M$mon
			  		#end
					#end
				FROM W_CUST CUST
			    LEFT OUTER JOIN W_RES RES
			      ON CUST.COMPANY_CD = RES.COMPANY_CD
			     AND CUST.BU_CD      = RES.BU_CD
			     AND CUST.CUST_GROUP_CD = RES.CUST_GROUP_CD
			    WHERE 1 = 1
			    GROUP BY CUST.COMPANY_CD, CUST.BU_CD, CUST.REP_CUST_GROUP_CD, CUST.REP_CUST_GROUP_NM
			) M
			INNER JOIN W_CODE BU
			   ON BU.CODE_CD  = M.BU_CD
			  AND BU.GROUP_CD = 'BU_CD'
			CROSS JOIN 
			(
				SELECT CATEGORY_CD
				     , CATEGORY_NM
				     , CATEGORY_IDX 
				FROM 
				(
					SELECT NULL AS CATEGORY_CD
					     , NULL AS CATEGORY_NM
					     , NULL AS CATEGORY_IDX
						#foreach($meaMap in $_parameter.meaList)
				        UNION ALL SELECT '$meaMap.CD', '$meaMap.NM', $velocityCount 
						#end
				) SS
				WHERE CATEGORY_CD IS NOT NULL
			) C
			#if($_parameter.reptCustGroup and $_parameter.reptCustGroup != "")
			WHERE M.REP_CUST_GROUP_CD IN ('$_parameter.reptCustGroup.replace(",","','")')
			#end
			GROUP BY ROLLUP ( M.BU_CD, ( M.REP_CUST_GROUP_CD, M.REP_CUST_GROUP_NM ) ), BU.CODE_NM, C.CATEGORY_CD, C.CATEGORY_NM, C.CATEGORY_IDX
			HAVING M.BU_CD IS NOT NULL
			ORDER BY M.BU_CD,REP_CUST_GROUP_CD, M.REP_CUST_GROUP_NM, C.CATEGORY_IDX
		END;
	</select>
	
	<select id="bizPerformInitSelect" parameterType="map" resultType="map">
		BEGIN
		    DECLARE @P_PRE_YEAR  NVARCHAR (4) = LEFT (CONVERT (NVARCHAR (30), DATEADD (YEAR, -1, DBO.UFN_GETDATE()), 112), 4);
		    DECLARE @P_CUR_YEAR  NVARCHAR (4) = LEFT (CONVERT (NVARCHAR (30), DBO.UFN_GETDATE(), 112), 4);
		    DECLARE @P_CUR_MONTH NVARCHAR (2) = SUBSTRING (CONVERT (NVARCHAR (30), DBO.UFN_GETDATE(), 112), 5, 2);
		    
		    DECLARE @P_ACT_MONTH NVARCHAR (6) = LEFT (CONVERT (NVARCHAR (30), DATEADD (MONTH, 4, DBO.UFN_GETDATE()), 112), 6); 
		    
		    SELECT @P_ACT_MONTH = ISNULL ( MAX (YEARMONTH) , LEFT (CONVERT (NVARCHAR (30), DATEADD (MONTH, 4, DBO.UFN_GETDATE()), 112), 6))
			FROM TB_KPI_ACTION_PLAN 
		    WHERE MEAS_CD = 'CFM_SP';
		     
		    IF @P_ACT_MONTH > @P_CUR_YEAR + '12'
		    	BEGIN
		        	SET @P_ACT_MONTH = @P_CUR_YEAR + '12';
		      	END
		      
		   	SELECT @P_CUR_MONTH           AS CUR_MONTH
		         , RIGHT(@P_ACT_MONTH, 2) AS ACT_MONTH
		END;
	</select>
	
</mapper>
