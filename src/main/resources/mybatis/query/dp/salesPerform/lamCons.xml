<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dp.salesPerform">
	<select id="lamConsPlanIdSelect" parameterType="map" resultType="map">
		/****** [ dp.salesPerform.lamConsPlanIdSelect ] ******/
		SELECT CONVERT(VARCHAR, CONVERT(DATETIME, (SELECT TOP 1 YYYYMMDD FROM TB_MST_CALENDAR WITH(NOLOCK) WHERE YEARWEEK = A1.START_WEEK)), 112) AS FROM_DATE
			 , CONVERT(VARCHAR, DATEADD(WEEK, 13, CONVERT(DATETIME, (SELECT TOP 1 YYYYMMDD FROM TB_MST_CALENDAR WITH(NOLOCK) WHERE YEARWEEK = A1.START_WEEK))), 112) AS TO_DATE
		FROM TB_MST_PLAN_VERSION A1 WITH(NOLOCK)
		WHERE A1.COMPANY_CD = @{GV_COMPANY_CD}
		  AND A1.BU_CD = @{GV_BU_CD}
		  AND A1.PLAN_TYPE_CD = 'DP_W'
		  AND A1.PLAN_ID = @{planId}
	</select>

	<select id="lamConsVersionSelect" parameterType="map" resultType="map">
		/****** [ dp.salesPerform.lamConsVersionSelect ] ******/
		SELECT PLAN_ID AS CODE_CD
		     , PLAN_ID AS CODE_NM
		     , CPFR_START_MONTH
		     , CPFR_END_MONTH
		     , CONFIRM_FLAG
		     , (SELECT YEARPWEEK FROM TB_MST_CALENDAR WHERE YYYYMMDD = CONVERT(VARCHAR, DBO.UFN_GETDATE(), 112)) AS CURRENT_WEEK
		     , CONVERT(VARCHAR, DBO.UFN_GETDATE(), 112) AS FROM_DATE
		     , CONVERT(VARCHAR, DATEADD(WEEK, 13, DBO.UFN_GETDATE()), 112) AS TO_DATE  
		FROM TB_MST_PLAN_VERSION WITH(NOLOCK)
		WHERE COMPANY_CD = @{GV_COMPANY_CD}
		  AND BU_CD = @{GV_BU_CD}
		  AND PLAN_TYPE_CD = 'DP_W'
		#if($_parameter.planId and $_parameter.planId != "")
		  AND PLAN_ID = @{planId}
		#end
		 AND START_WEEK <![CDATA[<=]]> (SELECT YEARWEEK FROM TB_MST_CALENDAR WITH(NOLOCK) WHERE YYYYMMDD = CONVERT(VARCHAR, DBO.UFN_GETDATE(), 112))
		ORDER BY PLAN_ID DESC
	</select>
	
	<select id="bucketAllSelect" parameterType="map" resultType="map">
	    /****** [ dp.salesPerform.bucketAllSelect ] ******/
	    SELECT '' AS BUCKET_ID
		     , '' AS BUCKET_VAL
		     , 'LATELY' AS CD
		     , dbo.UFN_GET_TRANSLATE('lbl', 'forecast', @{GV_LANG}) AS NM
		     , '' AS ROOT_CD
		     , 'group' AS TYPE
		     , NULL AS TOT_TYPE
	</select>
	
	<select id="bucketAll2Select" parameterType="map" resultType="map">
	    /****** [ dp.salesPerform.bucketAll2Select ] ******/
	    SELECT 'PW' + YEARWEEK AS BUCKET_ID
		     , YEARWEEK AS BUCKET_VAL
		     , 'PW' + YEARWEEK AS CD
		     , YEARWEEK AS NM
		     , 'LATELY' AS ROOT_CD
		     , 'M' + YEARMONTH_STD AS TYPE
		     , NULL AS TOT_TYPE
		FROM TB_MST_CALENDAR WITH(NOLOCK)
		WHERE YYYYMMDD BETWEEN @{fromDate} AND @{toDate}
		GROUP BY YEARMONTH_STD, YEARWEEK
		#if($_parameter.excelFlag != "Y")
		UNION ALL
		SELECT 'M' + YEARMONTH_STD AS BUCKET_ID
        	 , YEARMONTH_STD AS BUCKET_VAL     
           	 , 'M' + YEARMONTH_STD AS CD
			 , 'Month Total' AS NM
			 , 'LATELY' AS ROOT_CD			     
			 , 'M' + YEARMONTH_STD AS TYPE
			 , 'MT' AS TOT_TYPE
		FROM TB_MST_CALENDAR WITH(NOLOCK)
		WHERE YYYYMMDD BETWEEN @{fromDate} AND @{toDate}
		GROUP BY YEARMONTH_STD
      	ORDER BY TYPE, TOT_TYPE 
      	#end
	</select>
	
	<select id="lamConsSelect" parameterType="map" resultType="map">
		/****** [ dp.salesPerform.lamConsSelect ] ******/
		BEGIN
		
			DECLARE @P_BEFORE_PLAN_ID NVARCHAR(8);
    		DECLARE @P_BEFORE_WEEK NVARCHAR(6);
    		DECLARE @P_START_WEEK NVARCHAR(6);
    		
    		SELECT @P_START_WEEK = START_WEEK
		  	FROM TB_MST_PLAN_VERSION WITH(NOLOCK)
		 	WHERE COMPANY_CD = @{GV_COMPANY_CD}
		 	  AND BU_CD = @{GV_BU_CD}
		 	  AND PLAN_TYPE_CD = 'DP_W'
		   	  AND PLAN_ID = @{planId}
			;
    		
    		SELECT @P_BEFORE_PLAN_ID = PLAN_ID
    		     , @P_BEFORE_WEEK = START_WEEK
			FROM
			(
	    		SELECT TOP 1 PLAN_ID
	    		     , START_WEEK
				FROM TB_MST_PLAN_VERSION WITH(NOLOCK)
				WHERE COMPANY_CD = @{GV_COMPANY_CD}
			 	  AND BU_CD = @{GV_BU_CD}
			 	  AND PLAN_TYPE_CD = 'DP_W'
				  AND START_WEEK <![CDATA[<]]> @P_START_WEEK
				ORDER BY START_WEEK DESC
			) A
			;
			
			SELECT NULL AS TMP_COL
				<include refid="include.getCdDimTotal"/>
				<include refid="include.getGrpLvlId"/>
				#set($strTotal = "")
				#foreach($bucketMap in $_parameter.bucketList)
				#set($paramWeek = "$bucketMap.BUCKET_VAL")
				#if($bucketMap.CD.indexOf("M") == -1)
				 , SUM($bucketMap.CD) AS $bucketMap.CD
				#set($strTotal = $strTotal + "," +$bucketMap.CD)
				#else
				#if($_parameter.excelFlag != "Y")
				 , SUM(ISNULL($strTotal.substring(1).replace(",",",0)+ISNULL("),0)) AS $bucketMap.CD
				#end 
				#set($strTotal = "")
				#end
				#end
				, SUM(MIN_QTY) AS MIN_QTY
				, SUM(MAX_QTY) AS MAX_QTY
				, SUM(LAST_USG_QTY) AS LAST_USG_QTY
				, SUM(INV_QTY) AS INV_QTY
				#if($_parameter.excelFlag != "Y")
				, MAX(WARE_HOUSE_CD) AS WARE_HOUSE_CD
				, MAX(ITEM_AUTH) AS ITEM_AUTH
				, MAX(PLAN_ID) AS PLAN_ID 
				#end
			FROM
			(
				SELECT ISNULL(CASE WHEN UPPER(@{GV_LANG}) = 'KO' THEN MCO.CODE_NM_KR
				            	   WHEN UPPER(@{GV_LANG}) = 'CN' THEN MCO.CODE_NM_CN
				             	   ELSE MCO.CODE_NM
							   END, ' ') AS WARE_HOUSE_NM
					 , ISNULL(CASE WHEN UPPER(@{GV_LANG}) = 'KO' THEN MCO.CODE_NM_KR
				            	   WHEN UPPER(@{GV_LANG}) = 'CN' THEN MCO.CODE_NM_CN
				             	   ELSE MCO.CODE_NM
							   END, ' ') AS  WARE_HOUSE_NM_NM
				     , ISNULL(MI.ITEM_CD, ' ') AS ITEM_CD
				     , ISNULL(MI.ITEM_CD, ' ') AS ITEM_CD_NM
				     , ISNULL(MI.ITEM_NM, ' ') AS ITEM_NM
				     , ISNULL(MI.ITEM_NM, ' ') AS ITEM_NM_NM
				     , ISNULL(MI.SPEC, ' ') AS SPEC
				     , ISNULL(MI.SPEC, ' ') AS SPEC_NM
				     , ISNULL(MI.DRAW_NO, ' ') AS DRAW_NO
				     , ISNULL(MI.DRAW_NO, ' ') AS DRAW_NO_NM
				     , ISNULL(MI.ITEM_GROUP_CD, ' ') AS ITEM_GROUP_CD
				     , ISNULL(MI.ITEM_GROUP_CD, ' ') AS ITEM_GROUP_CD_NM
				     , ISNULL(MIG.ITEM_GROUP_NM, ' ') AS ITEM_GROUP_NM
				     , ISNULL(MIG.ITEM_GROUP_NM, ' ') AS ITEM_GROUP_NM_NM
				     , ISNULL(CAST (MICG.SALES_PRICE_KRW AS NVARCHAR(20)), ' ') AS SALES_PRICE_KRW
					 , ISNULL(CAST (MICG.SALES_PRICE_KRW AS NVARCHAR(20)), ' ') AS SALES_PRICE_KRW_NM
					 , MCO.SORT
				     , HFL2.QTY AS MIN_QTY
				     , HFL3.QTY AS MAX_QTY
				     , HFL1.QTY AS LAST_USG_QTY
				     , HFL4.QTY AS INV_QTY
					#foreach($bucketMap in $_parameter.bucketList)
					#set($paramWeek = "$bucketMap.BUCKET_VAL")
					#if($bucketMap.CD.indexOf("M") == -1)
					 , $bucketMap.CD AS $bucketMap.CD
					#end
					#end
					 , CASE WHEN AUTH.ITEM_CD IS NOT NULL THEN 'Y' ELSE 'N' END ITEM_AUTH
					 , @{planId} AS PLAN_ID
					 , MCO.CODE_CD AS WARE_HOUSE_CD
					#if($_parameter.excelFlag == "Y")
					 , CASE WHEN AUTH.ITEM_CD IS NOT NULL THEN 'Y' ELSE 'N' END ITEM_AUTH_NM
					 , @{planId} AS PLAN_ID_NM
					 , MCO.CODE_CD AS WARE_HOUSE_CD_NM
					#end
				FROM TB_MST_ITEM MI WITH(NOLOCK)
				INNER JOIN TB_MST_CODE MCO WITH(NOLOCK)
				   ON MCO.BU_CD = MI.BU_CD
				  AND MCO.GROUP_CD = 'LAM_SL_CD'
				  AND MCO.USE_FLAG = 'Y'
				INNER JOIN TB_MST_CUSTOMER MC WITH(NOLOCK)
				   ON MC.COMPANY_CD = MI.COMPANY_CD
				  AND MC.BU_CD = MI.BU_CD
				  AND MC.CUST_CD = MI.REP_CUST_CD
				  AND MC.REP_CUST_GROUP_CD = 'RCG003'
				LEFT OUTER JOIN TB_MST_ITEM_GROUP MIG WITH(NOLOCK)
				  ON MIG.COMPANY_CD = MI.COMPANY_CD
				 AND MIG.BU_CD = MI.BU_CD
				 AND MIG.ITEM_GROUP_CD = MI.ITEM_GROUP_CD
				LEFT OUTER JOIN TB_MAP_ITEM_CUST_GROUP MICG WITH(NOLOCK)
				  ON MICG.COMPANY_CD = MI.COMPANY_CD
				 AND MICG.BU_CD = MI.BU_CD
				 AND MICG.ITEM_CD = MI.ITEM_CD
				 AND MICG.CUST_GROUP_CD = MC.CUST_GROUP_CD
				LEFT OUTER JOIN TB_HIS_FCST_LAM HFL1 WITH(NOLOCK)
				  ON HFL1.COMPANY_CD = MI.COMPANY_CD
				 AND HFL1.BU_CD = MI.BU_CD
				 AND HFL1.PLAN_ID = @P_BEFORE_PLAN_ID -- 선택된 PLAN_ID 이전 PLAN_ID를 가져온다
				 AND HFL1.SL_CD = MCO.CODE_CD
				 AND HFL1.ITEM_CD = MI.ITEM_CD
				 AND HFL1.MEAS_CD = 'USG'
				 AND HFL1.YEARWEEK = @P_BEFORE_WEEK
				LEFT OUTER JOIN TB_HIS_FCST_LAM HFL2 WITH(NOLOCK)
				  ON HFL2.COMPANY_CD = MI.COMPANY_CD
				 AND HFL2.BU_CD = MI.BU_CD
				 AND HFL2.PLAN_ID = @{planId} -- 선택된 PLAN_ID
				 AND HFL2.SL_CD = MCO.CODE_CD
				 AND HFL2.ITEM_CD = MI.ITEM_CD
				 AND HFL2.MEAS_CD = 'MIN'
				 AND HFL2.YEARWEEK = @P_START_WEEK
				LEFT OUTER JOIN TB_HIS_FCST_LAM HFL3 WITH(NOLOCK)
				  ON HFL3.COMPANY_CD = MI.COMPANY_CD
				 AND HFL3.BU_CD = MI.BU_CD
				 AND HFL3.PLAN_ID = @{planId} -- 선택된 PLAN_ID
				 AND HFL3.SL_CD = MCO.CODE_CD
				 AND HFL3.ITEM_CD = MI.ITEM_CD
				 AND HFL3.MEAS_CD = 'MAX'
				 AND HFL3.YEARWEEK = @P_START_WEEK
				LEFT OUTER JOIN TB_HIS_FCST_LAM HFL4 WITH(NOLOCK)
				  ON HFL4.COMPANY_CD = MI.COMPANY_CD
				 AND HFL4.BU_CD = MI.BU_CD
				 AND HFL4.PLAN_ID = @{planId} -- 선택된 PLAN_ID
				 AND HFL4.SL_CD = MCO.CODE_CD
				 AND HFL4.ITEM_CD = MI.ITEM_CD
				 AND HFL4.MEAS_CD = 'INV'
				 AND HFL4.YEARWEEK = @P_START_WEEK
				LEFT OUTER JOIN 
				(
					SELECT HFL5.COMPANY_CD
	                     , HFL5.BU_CD
	                     , HFL5.SL_CD
	                     , HFL5.ITEM_CD
						#foreach($bucketMap in $_parameter.bucketList)
						#set($paramWeek = "$bucketMap.BUCKET_VAL")
						#if($bucketMap.CD.indexOf("M") == -1)
						 , SUM(CASE WHEN HFL5.YEARWEEK = '$paramWeek' THEN HFL5.QTY END) AS $bucketMap.CD
						#end
						#end
					FROM TB_HIS_FCST_LAM HFL5 WITH(NOLOCK)
	                WHERE HFL5.COMPANY_CD = @{GV_COMPANY_CD}
	                  AND HFL5.BU_CD = @{GV_BU_CD}
	                  AND HFL5.PLAN_ID = @{planId} -- 선택된 PLAN_ID
	                  AND HFL5.MEAS_CD = 'FCST'
	                  AND HFL5.YEARWEEK BETWEEN @{fromWeek} AND @{toWeek}
	                GROUP BY HFL5.COMPANY_CD, HFL5.BU_CD, HFL5.SL_CD, HFL5.ITEM_CD
				) HFL5
				ON HFL5.COMPANY_CD = MI.COMPANY_CD
				AND HFL5.BU_CD = MI.BU_CD
				AND HFL5.SL_CD = MCO.CODE_CD
				AND HFL5.ITEM_CD = MI.ITEM_CD
				LEFT OUTER JOIN 
				(
					SELECT A1.COMPANY_CD
	                	 , A1.BU_CD
	                 	 , A1.ITEM_CD
	                 	 , A1.CUST_GROUP_CD
					FROM TB_MAP_ITEM_CUST_GROUP_AP1 A1 WITH(NOLOCK)
					INNER JOIN TB_MAP_AP1_AP2 A2 WITH(NOLOCK)
	                   ON A1.COMPANY_CD  = A2.COMPANY_CD
	                  AND A1.AP1_USER_ID = A2.AP1_USER_ID
	                  AND (A2.AP2_USER_ID = @{GV_USER_ID} OR A2.AP1_USER_ID = @{GV_USER_ID})
	              	  AND A1.USE_FLAG = 'Y'				
	              	GROUP BY  A1.COMPANY_CD, A1.BU_CD, A1.ITEM_CD, A1.CUST_GROUP_CD
				) AUTH
				ON AUTH.COMPANY_CD = MICG.COMPANY_CD
				AND AUTH.BU_CD = MICG.BU_CD
				AND AUTH.ITEM_CD = MICG.ITEM_CD
				AND AUTH.CUST_GROUP_CD = MICG.CUST_GROUP_CD
				WHERE MI.COMPANY_CD = @{GV_COMPANY_CD}
				  AND MI.BU_CD = @{GV_BU_CD}
				  AND MI.ITEM_TYPE IN ('10', '50')
				#if($_parameter.item_cd and $_parameter.item_cd != "")
       			  AND MI.ITEM_CD IN ('$_parameter.item_cd.replace(",","','")')
  				#elseif($_parameter.item_nm and $_parameter.item_nm != "")
       			  AND (MI.ITEM_CD LIKE '%'+@{item_nm}+'%' OR MI.ITEM_NM LIKE '%'+@{item_nm}+'%')
  				#end
  				#if($_parameter.spec and $_parameter.spec != "")
			  	  AND (MI.SPEC LIKE '%'+@{spec}+'%')
				#end
				#if($_parameter.wareHouse and $_parameter.wareHouse != "")
			  	  AND MCO.CODE_CD = @{wareHouse}
				#end
			) A
			GROUP BY ROLLUP (<include refid="include.getCdRollup"/>)
			ORDER BY TMP_COL
			#foreach( $dimMap in $_parameter.dimList )
			  , A.$dimMap.DIM_CD
			#end
		 END;
	</select>
	
	<update id="lamConsUpdate" parameterType="map">
    	/****** [ dp.salesPerform.lamConsUpdate ] ******/
    	BEGIN
    		
    		DECLARE BUCKET_LIST CURSOR FOR
                
			#foreach ($bucketMap in $_parameter.BUCKET_LIST)
			#if ($foreach.count != 1)
				UNION ALL
			#end
				SELECT '$bucketMap.YEARWEEK' AS YEARWEEK, $bucketMap.QTY AS QTY, '$bucketMap.MEAS_CD' AS MEAS_CD, $bucketMap.FLAG AS FLAG  
			#end
			
                /* Open : Week Cursor ---------------------------------------------- */
                OPEN BUCKET_LIST
                
                DECLARE @P_PLAN_ID        nvarchar(8)
                DECLARE @YEARWEEK   	  nvarchar(6)
                DECLARE @MEAS_CD       	  nvarchar(12)
                DECLARE @QTY        	  numeric(21, 6)
                DECLARE @FLAG        	  int
                
                FETCH NEXT FROM BUCKET_LIST INTO @YEARWEEK, @QTY, @MEAS_CD, @FLAG
                
                WHILE (@@FETCH_STATUS = 0)
                    BEGIN
                    
                    	IF(@FLAG = 1)
                    		BEGIN
	                    		SELECT @YEARWEEK = START_WEEK
	                    		     , @P_PLAN_ID = PLAN_ID
							  	FROM TB_MST_PLAN_VERSION WITH(NOLOCK)
							 	WHERE COMPANY_CD = @{GV_COMPANY_CD}
							 	  AND BU_CD = @{GV_BU_CD}
							 	  AND PLAN_TYPE_CD = 'DP_W'
							   	  AND PLAN_ID = @{PLAN_ID}
							END                    	
                    	IF(@FLAG = 2)
                    		BEGIN
                    			SELECT @P_PLAN_ID = PLAN_ID
					    		     , @YEARWEEK = START_WEEK
								FROM
								(
						    		SELECT TOP 1 PLAN_ID
						    		     , START_WEEK
									FROM TB_MST_PLAN_VERSION WITH(NOLOCK)
									WHERE COMPANY_CD = @{GV_COMPANY_CD}
								 	  AND BU_CD = @{GV_BU_CD}
								 	  AND PLAN_TYPE_CD = 'DP_W'
									  AND START_WEEK <![CDATA[<]]> (
									  	SELECT START_WEEK
									  	FROM TB_MST_PLAN_VERSION WITH(NOLOCK)
									 	WHERE COMPANY_CD = @{GV_COMPANY_CD}
									 	  AND BU_CD = @{GV_BU_CD}
									 	  AND PLAN_TYPE_CD = 'DP_W'
									   	  AND PLAN_ID = @{PLAN_ID}
									  )
									ORDER BY START_WEEK DESC
								) A
                    		END
                    	
                   		BEGIN
							MERGE TB_HIS_FCST_LAM AS A
                            USING 
                            (
                            	SELECT 'X' AS DUAL
							) AS B 
                            ON COMPANY_CD    = @{GV_COMPANY_CD}
							AND BU_CD        = @{GV_BU_CD}
                            AND PLAN_ID      = @P_PLAN_ID
                            AND SL_CD		 = @{WARE_HOUSE_CD}
                            AND ITEM_CD      = @{ITEM_CD}
                            AND MEAS_CD      = @MEAS_CD
                            AND YEARWEEK	 = @YEARWEEK
                            WHEN MATCHED THEN
							UPDATE 
							SET QTY         = @QTY
                              , UPDATE_ID   = CASE WHEN QTY = @QTY THEN UPDATE_ID ELSE @{GV_USER_ID} END
                              , UPDATE_DTTM = CASE WHEN QTY = @QTY THEN UPDATE_DTTM ELSE DBO.UFN_GETDATE() END
							WHEN NOT MATCHED THEN
							INSERT 
                            (
								COMPANY_CD
                              , BU_CD
                              , PLAN_ID
                              , SL_CD
                              , ITEM_CD
                              , MEAS_CD
                              , YEARWEEK
                              , QTY
                              , CREATE_ID
                              , CREATE_DTTM
                              , UPDATE_ID
                              , UPDATE_DTTM
							) VALUES (
                            	@{GV_COMPANY_CD}
                              , @{GV_BU_CD}
                              , @P_PLAN_ID
                              , @{WARE_HOUSE_CD}
                              , @{ITEM_CD}
                              , @MEAS_CD
                              , @YEARWEEK
                              , @QTY
                              , @{GV_USER_ID}
                              , DBO.UFN_GETDATE()
                              , @{GV_USER_ID}
                              , DBO.UFN_GETDATE()
							);
						END
                    	
                        FETCH NEXT FROM BUCKET_LIST INTO @YEARWEEK, @QTY, @MEAS_CD, @FLAG
                    END
                    
                CLOSE BUCKET_LIST
                DEALLOCATE BUCKET_LIST
                /* Close : Week Cursor --------------------------------------------- */
    	END;
    </update>
    
    <select id="lamConsSummaryDateSelect" parameterType="map" resultType="map">
		/****** [ dp.salesPerform.lamConsSummaryDateSelect ] ******/
		SELECT CONVERT(VARCHAR, DATEADD(WEEK, -10, DBO.UFN_GETDATE()), 112) AS FROM_DATE
     		 , CONVERT(VARCHAR, DATEADD(WEEK, 10, DBO.UFN_GETDATE()), 112) AS TO_DATE
	</select>
	
    <select id="lamConsSummarySelect" parameterType="map" resultType="map">
		/****** [ dp.salesPerform.lamConsSummarySelect ] ******/
		SELECT A1.CODE_NM AS CODE_NM_NM
			#set($strTotal = "")
			#foreach($bucketMap in $_parameter.bucketList)
			#set($paramWeek = "$bucketMap.BUCKET_VAL")
			#if($bucketMap.CD.indexOf("M") == -1)
			 , $bucketMap.CD
			#set($strTotal = $strTotal + "," +$bucketMap.CD)
			#else
			 , ISNULL($strTotal.substring(1).replace(",",",0)+ISNULL("),0) AS $bucketMap.CD
			#set($strTotal = "")
			#end
			#end
		FROM
		(
			SELECT MC.CODE_NM
				#foreach($bucketMap in $_parameter.bucketList)
				#set($paramWeek = "$bucketMap.BUCKET_VAL")
				#if($bucketMap.CD.indexOf("M") == -1)
				 , SUM(CASE WHEN HFL.YEARWEEK = '$paramWeek' THEN HFL.QTY END) AS $bucketMap.CD
				#end
				#end
			     , MC.SORT
			FROM TB_MST_CODE MC WITH(NOLOCK)
			LEFT OUTER JOIN TB_HIS_FCST_LAM HFL WITH(NOLOCK)
			  ON HFL.COMPANY_CD = @{GV_COMPANY_CD}
			 AND HFL.BU_CD = MC.BU_CD
			 AND HFL.MEAS_CD = MC.CODE_CD
			 AND EXISTS (
			            	SELECT 1
			                FROM TB_MST_PLAN_VERSION MPV WITH(NOLOCK)
			                WHERE MPV.COMPANY_CD = HFL.COMPANY_CD
			                  AND MPV.BU_CD = HFL.BU_CD
			                  AND MPV.PLAN_TYPE_CD = 'DP_W'
			                  AND MPV.PLAN_ID = HFL.PLAN_ID
			                  AND MPV.START_WEEK = HFL.YEARWEEK
			                  AND MPV.START_WEEK BETWEEN @{fromWeek} AND @{toWeek}
			                UNION ALL
			               	SELECT 1
			                FROM TB_MST_PLAN_VERSION MPV WITH(NOLOCK)
			                WHERE MPV.COMPANY_CD = HFL.COMPANY_CD
			                  AND MPV.BU_CD = HFL.BU_CD
			                  AND MPV.PLAN_TYPE_CD = 'DP_W'
			                  AND MPV.PLAN_ID = HFL.PLAN_ID
			                  AND MPV.START_WEEK <![CDATA[<=]]> HFL.YEARWEEK
			                  AND MPV.START_WEEK BETWEEN @{fromWeek} AND @{toWeek}
			                  AND MPV.RELEASE_FLAG = 'N'
			              )
			WHERE MC.BU_CD = @{GV_BU_CD}
			  AND MC.GROUP_CD = 'LAM_CON_TYPE'
			  AND MC.CODE_CD <![CDATA[<>]]> 'ACC'
			GROUP BY MC.CODE_NM, MC.SORT
			UNION ALL
			SELECT MC.CODE_NM
				#foreach($bucketMap in $_parameter.bucketList)
				#set($paramWeek = "$bucketMap.BUCKET_VAL")
				#if($bucketMap.CD.indexOf("M") == -1)
				 , ROUND(SUM(CASE WHEN HFL.YEARWEEK = '$paramWeek' AND HFL.MEAS_CD = 'USG' THEN HFL.QTY END) / NULLIF(SUM(CASE WHEN HFL.YEARWEEK = '$paramWeek' AND HFL.MEAS_CD = 'FCST' THEN HFL.QTY END), 0) * 100, 0) AS $bucketMap.CD
				#end
				#end
			     , MC.SORT
			FROM TB_MST_CODE MC WITH(NOLOCK)
			LEFT OUTER JOIN TB_HIS_FCST_LAM HFL WITH(NOLOCK)
			  ON HFL.COMPANY_CD = @{GV_COMPANY_CD}
			 AND HFL.BU_CD = MC.BU_CD
			 AND HFL.MEAS_CD IN ('FCST', 'USG')
			 AND EXISTS (
							SELECT 1
			                FROM TB_MST_PLAN_VERSION MPV WITH(NOLOCK)
			                WHERE MPV.COMPANY_CD = HFL.COMPANY_CD
			                  AND MPV.BU_CD = HFL.BU_CD
			                  AND MPV.PLAN_TYPE_CD = 'DP_W'
			                  AND MPV.PLAN_ID = HFL.PLAN_ID
			                  AND MPV.START_WEEK = HFL.YEARWEEK
			                  AND MPV.START_WEEK BETWEEN @{fromWeek} AND @{toWeek}
			                UNION ALL
			               	SELECT 1
			                FROM TB_MST_PLAN_VERSION MPV WITH(NOLOCK)
			                WHERE MPV.COMPANY_CD = HFL.COMPANY_CD
			                  AND MPV.BU_CD = HFL.BU_CD
			                  AND MPV.PLAN_TYPE_CD = 'DP_W'
			                  AND MPV.PLAN_ID = HFL.PLAN_ID
			                  AND MPV.START_WEEK <![CDATA[<=]]> HFL.YEARWEEK
			                  AND MPV.START_WEEK BETWEEN @{fromWeek} AND @{toWeek}
			                  AND MPV.RELEASE_FLAG = 'N'
			              )
			WHERE MC.BU_CD = @{GV_BU_CD}
			  AND MC.GROUP_CD = 'LAM_CON_TYPE'
			  AND MC.CODE_CD = 'ACC'
			GROUP BY MC.CODE_NM, MC.SORT
		) A1
		ORDER BY A1.SORT
	</select>
    
    <select id="lamConsSummaryExcelSqlSelect" parameterType="map" resultType="map">
	/****** [ dp.salesPerform.lamConsSummaryExcelSqlSelect ] ******/
		SELECT CASE WHEN A2.MENU_CD = @{popUpMenuCd} THEN 'Y' ELSE 'N' END AS USE_FLAG
		, A2.ACTION_CD
		FROM
		(
		  	SELECT BU_CD
		         , ROLE_CD
		  	FROM TB_MAP_USER_ROLE WITH(NOLOCK)
		  	WHERE USER_ID = @{GV_USER_ID}
		      AND BU_CD = @{GV_BU_CD}
		      AND USE_FLAG = 'Y'
		) A1
		INNER JOIN
		(
		  	SELECT COMPANY_CD
		         , BU_CD
		         , ROLE_CD
		         , MENU_CD
		         , ACTION_CD
		  	FROM TB_MAP_ROLE_MENU_ACTION WITH(NOLOCK)
		  	WHERE COMPANY_CD = @{GV_COMPANY_CD}
		      AND BU_CD = @{GV_BU_CD}
		      AND MENU_CD = @{popUpMenuCd}
		      AND ACTION_CD IN ('EXCEL','SQL')
		      AND USE_FLAG = 'Y'
		) A2
		ON A1.BU_CD = A2.BU_CD
		AND A1.ROLE_CD = A2.ROLE_CD
		GROUP BY A2.MENU_CD
		, A2.ACTION_CD
	
	</select>
    
    

</mapper>
