<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="aps.planExecute">
	
	<select id="planIdBasicSelect" parameterType="map" resultType="map">
		/****** [ aps.planExecute.planIdBasicSelect ] ******/
		SELECT B1.*
		     , B1.PLAN_ID AS CODE_CD
		     , B1.PLAN_ID AS CODE_NM
		     , (SELECT YYYYMMDD FROM TB_MST_CALENDAR WHERE YEARWEEK = B1.APS_START_WEEK AND DAY_NM = 'SUN') AS START_DAY         
		     , (SELECT YYYYMMDD FROM TB_MST_CALENDAR WHERE YEARWEEK = B1.APS_END_WEEK AND DAY_NM = 'SAT') AS END_DAY
		     , (SELECT YYYYMMDD FROM TB_MST_CALENDAR WHERE YEARWEEK = B1.APS_CLOSE_WEEK AND DAY_NM = 'SAT') AS CLOSE_DAY
		FROM
		(
		  	SELECT PLAN_ID
		         , APS_START_WEEK
		         , (SELECT YEARWEEK FROM TB_MST_CALENDAR WHERE YYYYMMDD = (SELECT CONVERT(NVARCHAR, DATEADD(DAY, 14, YYYYMMDD), 112) AS YYYYMMDD FROM TB_MST_CALENDAR WHERE YEARWEEK = A1.APS_START_WEEK AND DAY_NM = 'SUN')) AS APS_END_WEEK
		         , APS_END_WEEK AS APS_CLOSE_WEEK       
		  	FROM TB_MST_PLAN_VERSION A1
		  	WHERE COMPANY_CD = @{GV_COMPANY_CD}
		      AND BU_CD = @{GV_BU_CD}
		      AND PLAN_TYPE_CD = 'MP'
		) B1
		ORDER BY B1.APS_START_WEEK DESC
	</select>

	<select id="basicValidationListSelect" parameterType="map" resultType="map">
		/****** [ aps.planExecute.basicValidationListSelect ] ******/
		
		DECLARE @V_CUR_DATE         NVARCHAR(8),
		        @V_CURRENT_DATE     DATETIME
		        
		SET @V_CURRENT_DATE = DBO.UFN_GETDATE();
		SET @V_CUR_DATE = CONVERT(NVARCHAR, @V_CURRENT_DATE, 112)
		
		SELECT 'Total' AS PLAN_ID_NM 
		     , NULL AS PROD_PART_NM
		     , NULL AS ITEM_CD_NM
		     , NULL AS ITEM_NM_NM
		     , NULL AS PROCUR_TYPE_NM
		     , NULL AS SPEC_NM
		     , NULL AS ITEM_GRADE_NM
		     , NULL AS ITEM_TYPE_CD_NM
		     , NULL AS ITEM_TYPE_NM_NM
		     , NULL AS SALES_PRICE_KRW_NM
		     , NULL AS ROUTING_ID_NM
		     , NULL AS ROUTING_NO_NM  
		     , NULL AS REP_CUST_NM_NM
		     , NULL AS CUST_GROUP_CD_NM
		     , NULL AS CUST_GROUP_NM_NM
		     , NULL AS REP_CUST_GROUP_CD_NM
		     , NULL AS REP_CUST_GROUP_NM_NM
		     , NULL AS ITEM_GROUP_CD_NM
		     , NULL AS ITEM_GROUP_NM_NM
		     , NULL AS SS_QTY_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN MI.CPFR_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS CPFR_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN MC1.CODE_CD IS NULL THEN 1 ELSE 0 END)), 1), '.00', '') AS RCPT_SL_CD_NM
		     , NULL AS INVALID_CNT_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.SALES_PLAN_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS SALES_PLAN_YN_NM
		     , NULL AS SP_QTY_NM
		     , NULL AS WIP_QTY_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.PROCESS_TIME_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS PROCESS_TIME_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.PROD_ORDER_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS PROD_ORDER_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.BOM_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS BOM_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.MAJOR_ROUTING_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS MAJOR_ROUTING_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.OS_PROCESS_TIME_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS OS_PROCESS_TIME_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.OUT_LOT_SIZE_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS OUT_LOT_SIZE_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.MOVE_TIME_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS MOVE_TIME_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.TOTAL_WORKER_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS TOTAL_PS_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.MAIN_WORKER_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS MAIN_PS_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.CAMPUS_PRIORITY_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS CAMPUS_PRIORITY_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.PROD_GROUP_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS PROD_GROUP_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.WOKER_GROUP_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS WOKER_GROUP_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.FIREWORK_AREA_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS FIREWORK_AREA_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.FIREWORK_ROUTE_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS FIREWORK_ROUTE_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.DEMAND_GRADE_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS DEMAND_GRADE_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.RSC_MAP_DEG_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS RSC_MAP_DEG_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.MIN_PUR_LT_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS MIN_PUR_LT_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.FQC_ROUTING_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS FQC_ROUTING_YN_NM
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.FIREWORK_JOB_MAPPING_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS FIREWORK_JOB_MAPPING_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.PROD_GROUP_JOB_MAPPING_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS PROD_GROUP_JOB_MAPPING_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.WORKER_MAPPING_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS WORKER_MAPPING_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HAV.ANNEALING_PRE_JOB_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS ANNEALING_PRE_JOB_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN FIXED_MRP_QTY_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS FIXED_MRP_QTY_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN WO_WORKER_GROUP_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS WO_WORKER_GROUP_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN CAMPUS_RESOURCE_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS CAMPUS_RESOURCE_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN AVAIL_MAIN_WORKER_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS AVAIL_MAIN_WORKER_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN ROUTING_PRIORITY_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS ROUTING_PRIORITY_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN COMM_PORTION_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS COMM_PORTION_YN_NM
			 , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HALF_ITEM_DUPLICATE_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS HALF_ITEM_DUPLICATE_YN_NM  -- 추가 디멘전
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN BOM_COMPNT_REQ_FLAG_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS BOM_COMPNT_REQ_FLAG_YN_NM  -- 추가 디멘전 
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN HALF_ITEM_INVALID_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '') AS HALF_ITEM_INVALID_YN_NM  -- 추가 디멘전
		     
		     
             -- 20220222 김수호  추가: 1. 설비-제품분류 Mapping 관리화면에서 Jig 보유수량 0(null)인 제품분류에 해당하는 품목들은 기준정보 Validation에 N으로 표시 (1이상은 Y로 표시) FROM 김영락K
		     , REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(CASE WHEN JIG_HOLDING_QTY_YN = 'N' THEN 1 ELSE 0 END)), 1), '.00', '')   AS JIG_HOLDING_QTY_YN_NM  -- 추가 디멘전
		     --------------------------------------------------------------------------------------------------------------------------------------------------------------
		FROM TB_HIS_APS_VALIDATION HAV WITH(NOLOCK)
		INNER JOIN TB_MST_ITEM MI WITH(NOLOCK)
		   ON MI.COMPANY_CD = HAV.COMPANY_CD
		  AND MI.BU_CD = HAV.BU_CD
		  AND MI.ITEM_CD = HAV.ITEM_CD
		INNER JOIN TB_MST_ITEM_PLANT MIP WITH(NOLOCK)
		   ON MIP.COMPANY_CD = MI.COMPANY_CD
		  AND MIP.BU_CD = MI.BU_CD
		  AND MIP.PLANT_CD = 'WF01'
		  AND MIP.ITEM_CD = MI.ITEM_CD
		LEFT OUTER JOIN TB_MST_REP_CUST MRC WITH(NOLOCK)
		  ON MRC.COMPANY_CD = MI.COMPANY_CD
		 AND MRC.BU_CD = MI.BU_CD
		 AND MRC.REP_CUST_CD = MI.REP_CUST_CD
		LEFT OUTER JOIN TB_MST_CUSTOMER MC WITH(NOLOCK)
		  ON MC.COMPANY_CD = MRC.COMPANY_CD
		 AND MC.BU_CD = MRC.BU_CD
		 AND MC.CUST_CD = MRC.REP_CUST_CD
		LEFT OUTER JOIN TB_MAP_ITEM_CUST_GROUP MICG WITH(NOLOCK)
		  ON MICG.COMPANY_CD = MI.COMPANY_CD
		 AND MICG.BU_CD = MI.BU_CD
		 AND MICG.ITEM_CD = MI.ITEM_CD
		 AND MICG.CUST_GROUP_CD = MC.CUST_GROUP_CD
		LEFT OUTER JOIN TB_MST_ITEM_GROUP MIG WITH(NOLOCK)
		  ON MIG.COMPANY_CD = MI.COMPANY_CD
		 AND MIG.BU_CD = MI.BU_CD
		 AND MIG.ITEM_GROUP_CD = MI.ITEM_GROUP_CD
		LEFT OUTER JOIN TB_MST_CODE MC1 WITH(NOLOCK)
		  ON MC1.BU_CD = MIP.BU_CD
		 AND MC1.GROUP_CD = 'CL_SL_CD'
		 AND MC1.CODE_CD = MIP.RCPT_SL_CD
		 AND MC1.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC2 WITH(NOLOCK)
		  ON MC2.BU_CD = HAV.BU_CD
		 AND MC2.GROUP_CD = 'PROD_PART'
		 AND MC2.CODE_CD = HAV.PROD_PART
		 AND MC2.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC3 WITH(NOLOCK)
		  ON MC3.BU_CD = 'ALL'
		 AND MC3.GROUP_CD = 'PROCUR_TYPE'
		 AND MC3.CODE_CD = MIP.PROCUR_TYPE
		 AND MC3.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC4 WITH(NOLOCK)
		  ON MC4.BU_CD = 'ALL'
		 AND MC4.GROUP_CD = 'ITEM_GRADE'
		 AND MC4.CODE_CD = MI.ITEM_GRADE
		 AND MC4.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC5 WITH(NOLOCK)
		  ON MC5.BU_CD = 'ALL'
		 AND MC5.GROUP_CD = 'ITEM_TYPE'
		 AND MC5.CODE_CD = MI.ITEM_TYPE
		 AND MC5.USE_FLAG = 'Y'
		WHERE HAV.PLAN_ID = @{planId}
		  AND MI.USE_FLAG = 'Y'
		#if($_parameter.prodPart and $_parameter.prodPart != "")
		  AND MC2.CODE_CD IN ('$_parameter.prodPart.replace(",","','")')
		#end
		#if($_parameter.demandYn and $_parameter.demandYn != "")
		  AND HAV.SALES_PLAN_YN = @{demandYn}
		#end
		#if($_parameter.prodOrderFormatYn and $_parameter.prodOrderFormatYn != "")
		  AND HAV.PROD_ORDER_YN = @{prodOrderFormatYn}
		#end
		#if($_parameter.invalidYn == "Y")
		  AND HAV.INVALID_CNT <![CDATA[>]]> 0
		#elseif($_parameter.invalidYn == "N")
		  AND HAV.INVALID_CNT = 0
		#end
		#if($_parameter.itemType and $_parameter.itemType != "")
	      AND MC5.CODE_CD IN ('$_parameter.itemType.replace(",","','")')
	    #end
		#if($_parameter.procurType and $_parameter.procurType != "")
	      AND MC3.CODE_CD IN ('$_parameter.procurType.replace(",","','")')
	    #end
	    #if($_parameter.route and $_parameter.route != "")
		  AND MIP.ROUTING_ID IN ('$_parameter.route.replace(",","','")')
		#end 
		#if($_parameter.itemGroup and $_parameter.itemGroup != "")
		  AND MI.ITEM_GROUP_CD IN ('$_parameter.itemGroup.replace(",","','")')
		#end
		#if($_parameter.item_cd and $_parameter.item_cd != "")
	      AND HAV.ITEM_CD IN ('$_parameter.item_cd.replace(",","','")')
	    #elseif($_parameter.item_nm and $_parameter.item_nm != "")
	      AND (HAV.ITEM_CD LIKE '%'+@{item_nm}+'%' OR MI.ITEM_NM LIKE '%'+@{item_nm}+'%')
	    #end
		UNION ALL
		SELECT HAV.PLAN_ID AS PLAN_ID_NM 
		     , MC2.CODE_NM AS PROD_PART_NM
		     , HAV.ITEM_CD AS ITEM_CD_NM
		     , MI.ITEM_NM AS ITEM_NM_NM
		     , MC3.CODE_NM AS PROCUR_TYPE_NM
		     , MI.SPEC AS SPEC_NM
		     , MC4.CODE_NM AS ITEM_GRADE_NM
		     , MC5.CODE_CD AS ITEM_TYPE_CD_NM
		     , MC5.CODE_NM AS ITEM_TYPE_NM_NM
		     , ISNULL(MICG.SALES_PRICE_KRW, MI.ITEM_COST_KRW) AS SALES_PRICE_KRW_NM
		     , MIP.ROUTING_ID AS ROUTING_ID_NM
		     , MIP.ROUTING_NO AS ROUTING_NO_NM  
		     , MC.CUST_NM AS REP_CUST_NM_NM
		     , MC.CUST_GROUP_CD AS CUST_GROUP_CD_NM
		     , MC.CUST_GROUP_NM AS CUST_GROUP_NM_NM
		     , MC.REP_CUST_GROUP_CD AS REP_CUST_GROUP_CD_NM
		     , MC.REP_CUST_GROUP_NM AS REP_CUST_GROUP_NM_NM
		     , MI.ITEM_GROUP_CD AS ITEM_GROUP_CD_NM
		     , MIG.ITEM_GROUP_NM AS ITEM_GROUP_NM_NM
		     , MIP.SS_QTY AS SS_QTY_NM
		     , MI.CPFR_YN AS CPFR_YN_NM
		     , CASE WHEN MC1.CODE_CD IS NULL THEN 'N' ELSE 'Y' END AS RCPT_SL_CD_NM
		     , HAV.INVALID_CNT AS INVALID_CNT_NM
		     , HAV.SALES_PLAN_YN AS SALES_PLAN_YN_NM
		     , HAV.SP_QTY AS SP_QTY_NM
		     , HAV.WIP_QTY AS WIP_QTY_NM
		     
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.PROCESS_TIME_YN = 'N' THEN CASE WHEN  HAVAI_PROCESS_TIME_YN.INVALID_INPUT_DATE IS NULL THEN HAV.PROCESS_TIME_YN ELSE HAV.PROCESS_TIME_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_PROCESS_TIME_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.PROCESS_TIME_YN END 
               ELSE HAV.PROCESS_TIME_YN  
               END AS PROCESS_TIME_YN_NM
             
		     , HAV.PROD_ORDER_YN AS PROD_ORDER_YN_NM
		     
		     
		     
		     
             , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.BOM_YN = 'N' THEN CASE WHEN  HAVAI_BOM_YN.INVALID_INPUT_DATE IS NULL THEN HAV.BOM_YN ELSE HAV.BOM_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_BOM_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.BOM_YN END 
               ELSE HAV.BOM_YN  
               END AS BOM_YN_NM
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.MAJOR_ROUTING_YN = 'N' THEN CASE WHEN  HAVAI_MAJOR_ROUTING_YN.INVALID_INPUT_DATE IS NULL THEN HAV.MAJOR_ROUTING_YN ELSE HAV.MAJOR_ROUTING_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_MAJOR_ROUTING_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.MAJOR_ROUTING_YN END 
               ELSE HAV.MAJOR_ROUTING_YN  
               END AS MAJOR_ROUTING_YN_NM
             
		     
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.OS_PROCESS_TIME_YN = 'N' THEN CASE WHEN  HAVAI_OS_PROCESS_TIME_YN.INVALID_INPUT_DATE IS NULL THEN HAV.OS_PROCESS_TIME_YN ELSE HAV.OS_PROCESS_TIME_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_OS_PROCESS_TIME_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.OS_PROCESS_TIME_YN END 
               ELSE HAV.OS_PROCESS_TIME_YN  
               END AS OS_PROCESS_TIME_YN_NM
             
		     

		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.OUT_LOT_SIZE_YN = 'N' THEN CASE WHEN  HAVAI_OUT_LOT_SIZE_YN.INVALID_INPUT_DATE IS NULL THEN HAV.OUT_LOT_SIZE_YN ELSE HAV.OUT_LOT_SIZE_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_OUT_LOT_SIZE_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.OUT_LOT_SIZE_YN END 
               ELSE HAV.OUT_LOT_SIZE_YN  
               END AS OUT_LOT_SIZE_YN_NM
             
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.MOVE_TIME_YN = 'N' THEN CASE WHEN  HAVAI_MOVE_TIME_YN.INVALID_INPUT_DATE IS NULL THEN HAV.MOVE_TIME_YN ELSE HAV.MOVE_TIME_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_MOVE_TIME_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.MOVE_TIME_YN END 
               ELSE HAV.MOVE_TIME_YN  
               END AS MOVE_TIME_YN_NM
             
		     
		     , HAV.TOTAL_WORKER_YN AS TOTAL_PS_YN_NM
		     
		     
		     , HAV.MAIN_WORKER_YN AS MAIN_PS_YN_NM
		     
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.CAMPUS_PRIORITY_YN = 'N' THEN CASE WHEN  HAVAI_CAMPUS_PRIORITY_YN.INVALID_INPUT_DATE IS NULL THEN HAV.CAMPUS_PRIORITY_YN ELSE HAV.CAMPUS_PRIORITY_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_CAMPUS_PRIORITY_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.CAMPUS_PRIORITY_YN END 
               ELSE HAV.CAMPUS_PRIORITY_YN  
               END AS CAMPUS_PRIORITY_YN_NM
             
		     
             , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.PROD_GROUP_YN = 'N' THEN CASE WHEN  HAVAI_PROD_GROUP_YN.INVALID_INPUT_DATE IS NULL THEN HAV.PROD_GROUP_YN ELSE HAV.PROD_GROUP_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_PROD_GROUP_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.PROD_GROUP_YN END 
               ELSE HAV.PROD_GROUP_YN  
               END AS PROD_GROUP_YN_NM
             		     
             , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.WOKER_GROUP_YN = 'N' THEN CASE WHEN  HAVAI_WOKER_GROUP_YN.INVALID_INPUT_DATE IS NULL THEN HAV.WOKER_GROUP_YN ELSE HAV.WOKER_GROUP_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_WOKER_GROUP_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.WOKER_GROUP_YN END 
               ELSE HAV.WOKER_GROUP_YN  
               END AS WOKER_GROUP_YN_NM
             
		     
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.FIREWORK_AREA_YN = 'N' THEN CASE WHEN  HAVAI_FIREWORK_AREA_YN.INVALID_INPUT_DATE IS NULL THEN HAV.FIREWORK_AREA_YN ELSE HAV.FIREWORK_AREA_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_FIREWORK_AREA_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.FIREWORK_AREA_YN END 
               ELSE HAV.FIREWORK_AREA_YN  
               END AS FIREWORK_AREA_YN_NM
             
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.FIREWORK_ROUTE_YN = 'N' THEN CASE WHEN  HAVAI_FIREWORK_ROUTE_YN.INVALID_INPUT_DATE IS NULL THEN HAV.FIREWORK_ROUTE_YN ELSE HAV.FIREWORK_ROUTE_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_FIREWORK_ROUTE_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.FIREWORK_ROUTE_YN END 
               ELSE HAV.FIREWORK_ROUTE_YN  
               END AS FIREWORK_ROUTE_YN_NM
             
		     
		     , HAV.DEMAND_GRADE_YN AS DEMAND_GRADE_YN_NM
		     
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.RSC_MAP_DEG_YN = 'N' THEN CASE WHEN  HAVAI_RSC_MAP_DEG_YN.INVALID_INPUT_DATE IS NULL THEN HAV.RSC_MAP_DEG_YN ELSE HAV.RSC_MAP_DEG_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_RSC_MAP_DEG_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.RSC_MAP_DEG_YN END 
               ELSE HAV.RSC_MAP_DEG_YN  
               END AS RSC_MAP_DEG_YN_NM
             
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.MIN_PUR_LT_YN = 'N' THEN CASE WHEN  HAVAI_MIN_PUR_LT_YN.INVALID_INPUT_DATE IS NULL THEN HAV.MIN_PUR_LT_YN ELSE HAV.MIN_PUR_LT_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_MIN_PUR_LT_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.MIN_PUR_LT_YN END 
               ELSE HAV.MIN_PUR_LT_YN  
               END AS MIN_PUR_LT_YN_NM
             
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.FQC_ROUTING_YN = 'N' THEN CASE WHEN  HAVAI_FQC_ROUTING_YN.INVALID_INPUT_DATE IS NULL THEN HAV.FQC_ROUTING_YN ELSE HAV.FQC_ROUTING_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_FQC_ROUTING_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.FQC_ROUTING_YN END 
               ELSE HAV.FQC_ROUTING_YN  
               END AS FQC_ROUTING_YN_NM
            
		    
		     
		     , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.FIREWORK_JOB_MAPPING_YN = 'N' THEN CASE WHEN  HAVAI_FIREWORK_JOB_MAPPING_YN.INVALID_INPUT_DATE IS NULL THEN HAV.FIREWORK_JOB_MAPPING_YN ELSE HAV.FIREWORK_JOB_MAPPING_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_FIREWORK_JOB_MAPPING_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.FIREWORK_JOB_MAPPING_YN END 
               ELSE HAV.FIREWORK_JOB_MAPPING_YN  
               END AS FIREWORK_JOB_MAPPING_YN_NM
             
			 
			 
			 , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.PROD_GROUP_JOB_MAPPING_YN = 'N' THEN CASE WHEN  HAVAI_PROD_GROUP_JOB_MAPPING_YN.INVALID_INPUT_DATE IS NULL THEN HAV.PROD_GROUP_JOB_MAPPING_YN ELSE HAV.PROD_GROUP_JOB_MAPPING_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_PROD_GROUP_JOB_MAPPING_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.PROD_GROUP_JOB_MAPPING_YN END 
               ELSE HAV.PROD_GROUP_JOB_MAPPING_YN  
               END AS PROD_GROUP_JOB_MAPPING_YN_NM
             
			 
			 , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.WORKER_MAPPING_YN = 'N' THEN CASE WHEN  HAVAI_WORKER_MAPPING_YN.INVALID_INPUT_DATE IS NULL THEN HAV.WORKER_MAPPING_YN ELSE HAV.WORKER_MAPPING_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_WORKER_MAPPING_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.WORKER_MAPPING_YN END 
               ELSE HAV.WORKER_MAPPING_YN  
               END AS WORKER_MAPPING_YN_NM
			 
			 , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.ANNEALING_PRE_JOB_YN = 'N' THEN CASE WHEN  HAVAI_ANNEALING_PRE_JOB_YN.INVALID_INPUT_DATE IS NULL THEN HAV.ANNEALING_PRE_JOB_YN ELSE HAV.ANNEALING_PRE_JOB_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_ANNEALING_PRE_JOB_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.ANNEALING_PRE_JOB_YN END 
               ELSE HAV.ANNEALING_PRE_JOB_YN  
               END AS ANNEALING_PRE_JOB_YN_NM
               
			   
			 , FIXED_MRP_QTY_YN AS FIXED_MRP_QTY_YN_NM
			 , WO_WORKER_GROUP_YN AS WO_WORKER_GROUP_YN_NM
			 , CAMPUS_RESOURCE_YN AS CAMPUS_RESOURCE_YN_NM
			 , AVAIL_MAIN_WORKER_YN AS AVAIL_MAIN_WORKER_YN_NM
			 , ROUTING_PRIORITY_YN AS ROUTING_PRIORITY_YN_NM
			 , HAV.COMM_PORTION_YN as COMM_PORTION_YN_NM
			 
			 
			 , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.HALF_ITEM_DUPLICATE_YN = 'N' THEN CASE WHEN  HAVAI_HALF_ITEM_DUPLICATE_YN.INVALID_INPUT_DATE IS NULL THEN HAV.HALF_ITEM_DUPLICATE_YN ELSE HAV.HALF_ITEM_DUPLICATE_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_HALF_ITEM_DUPLICATE_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.HALF_ITEM_DUPLICATE_YN END 
               ELSE HAV.HALF_ITEM_DUPLICATE_YN   
               END AS HALF_ITEM_DUPLICATE_YN_NM  -- 추가 디멘전
             
			 
			 , HAV.BOM_COMPNT_REQ_FLAG_YN AS BOM_COMPNT_REQ_FLAG_YN_NM  -- 추가 디멘전
			 , HAV.HALF_ITEM_INVALID_YN AS HALF_ITEM_INVALID_YN_NM      -- 추가 디멘전
			 
			 
			 
			 
			 -- 20220222 김수호  추가: 1. 설비-제품분류 Mapping 관리화면에서 Jig 보유수량 0(null)인 제품분류에 해당하는 품목들은 기준정보 Validation에 N으로 표시 (1이상은 Y로 표시) FROM 김영락K  
			 -- HAVAI_JIG_HOLDING_QTY_YN
			 
			 , CASE WHEN HAV.SALES_PLAN_YN = 'Y' THEN CASE WHEN HAV.JIG_HOLDING_QTY_YN = 'N' THEN CASE WHEN  HAVAI_JIG_HOLDING_QTY_YN.INVALID_INPUT_DATE IS NULL THEN HAV.JIG_HOLDING_QTY_YN ELSE HAV.JIG_HOLDING_QTY_YN + '(' + CAST(DATEDIFF(DAY,HAVAI_JIG_HOLDING_QTY_YN.INVALID_INPUT_DATE,@V_CUR_DATE) AS VARCHAR) + ')' END
                                                           
                                                      ELSE HAV.JIG_HOLDING_QTY_YN END 
               ELSE HAV.JIG_HOLDING_QTY_YN   
               END AS HAVAI_JIG_HOLDING_QTY_YN_NM  -- 추가 디멘전
             ----------------------------------------------------------------------------------------------------------------------------------------------- 
		FROM TB_HIS_APS_VALIDATION HAV WITH(NOLOCK)
		INNER JOIN TB_MST_ITEM MI WITH(NOLOCK)
		   ON MI.COMPANY_CD = HAV.COMPANY_CD
		  AND MI.BU_CD = HAV.BU_CD
		  AND MI.ITEM_CD = HAV.ITEM_CD
		INNER JOIN TB_MST_ITEM_PLANT MIP WITH(NOLOCK)
		   ON MIP.COMPANY_CD = MI.COMPANY_CD
		  AND MIP.BU_CD = MI.BU_CD
		  AND MIP.PLANT_CD = 'WF01'
		  AND MIP.ITEM_CD = MI.ITEM_CD
		LEFT OUTER JOIN TB_MST_REP_CUST MRC WITH(NOLOCK)
		  ON MRC.COMPANY_CD = MI.COMPANY_CD
		 AND MRC.BU_CD = MI.BU_CD
		 AND MRC.REP_CUST_CD = MI.REP_CUST_CD
		LEFT OUTER JOIN TB_MST_CUSTOMER MC WITH(NOLOCK)
		  ON MC.COMPANY_CD = MRC.COMPANY_CD
		 AND MC.BU_CD = MRC.BU_CD
		 AND MC.CUST_CD = MRC.REP_CUST_CD
		LEFT OUTER JOIN TB_MAP_ITEM_CUST_GROUP MICG WITH(NOLOCK)
		  ON MICG.COMPANY_CD = MI.COMPANY_CD
		 AND MICG.BU_CD = MI.BU_CD
		 AND MICG.ITEM_CD = MI.ITEM_CD
		 AND MICG.CUST_GROUP_CD = MC.CUST_GROUP_CD
		LEFT OUTER JOIN TB_MST_ITEM_GROUP MIG WITH(NOLOCK)
		  ON MIG.COMPANY_CD = MI.COMPANY_CD
		 AND MIG.BU_CD = MI.BU_CD
		 AND MIG.ITEM_GROUP_CD = MI.ITEM_GROUP_CD
		LEFT OUTER JOIN TB_MST_CODE MC1 WITH(NOLOCK)
		  ON MC1.BU_CD = MIP.BU_CD
		 AND MC1.GROUP_CD = 'CL_SL_CD'
		 AND MC1.CODE_CD = MIP.RCPT_SL_CD
		 AND MC1.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC2 WITH(NOLOCK)
		  ON MC2.BU_CD = HAV.BU_CD
		 AND MC2.GROUP_CD = 'PROD_PART'
		 AND MC2.CODE_CD = HAV.PROD_PART
		 AND MC2.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC3 WITH(NOLOCK)
		  ON MC3.BU_CD = 'ALL'
		 AND MC3.GROUP_CD = 'PROCUR_TYPE'
		 AND MC3.CODE_CD = MIP.PROCUR_TYPE
		 AND MC3.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC4 WITH(NOLOCK)
		  ON MC4.BU_CD = 'ALL'
		 AND MC4.GROUP_CD = 'ITEM_GRADE'
		 AND MC4.CODE_CD = MI.ITEM_GRADE
		 AND MC4.USE_FLAG = 'Y'
		LEFT OUTER JOIN TB_MST_CODE MC5 WITH(NOLOCK)
		  ON MC5.BU_CD = 'ALL'
		 AND MC5.GROUP_CD = 'ITEM_TYPE'
		 AND MC5.CODE_CD = MI.ITEM_TYPE
		 AND MC5.USE_FLAG = 'Y'
        -- 20211122 김수호 추가: VOC 267번, [지연일] 컬럼 추가 (수요유무 =>수요수량+재공, 컬럼별 지연일수 표현 필요 FROM 김영락D
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'BOM_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_BOM_YN 
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'HALF_ITEM_DUPLICATE_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_HALF_ITEM_DUPLICATE_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'MAJOR_ROUTING_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_MAJOR_ROUTING_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'PROCESS_TIME_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_PROCESS_TIME_YN    
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'OS_PROCESS_TIME_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_OS_PROCESS_TIME_YN    
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'OUT_LOT_SIZE_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_OUT_LOT_SIZE_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'MOVE_TIME_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_MOVE_TIME_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'CAMPUS_PRIORITY_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_CAMPUS_PRIORITY_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'PROD_GROUP_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_PROD_GROUP_YN               
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'WOKER_GROUP_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_WOKER_GROUP_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'FIREWORK_AREA_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_FIREWORK_AREA_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'FIREWORK_ROUTE_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_FIREWORK_ROUTE_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'RSC_MAP_DEG_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_RSC_MAP_DEG_YN                
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'MIN_PUR_LT_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_MIN_PUR_LT_YN                           
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'FIREWORK_JOB_MAPPING_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_FIREWORK_JOB_MAPPING_YN            
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'PROD_GROUP_JOB_MAPPING_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_PROD_GROUP_JOB_MAPPING_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'WORKER_MAPPING_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_WORKER_MAPPING_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'ANNEALING_PRE_JOB_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_ANNEALING_PRE_JOB_YN
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'FQC_ROUTING_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_FQC_ROUTING_YN
        
        --JIG_HOLDING_QTY_YN
        -- 20220222 김수호  추가: 1. 설비-제품분류 Mapping 관리화면에서 Jig 보유수량 0(null)인 제품분류에 해당하는 품목들은 기준정보 Validation에 N으로 표시 (1이상은 Y로 표시) FROM 김영락K
        OUTER APPLY
        (
            SELECT MIN(HAVAI.INVALID_INPUT_DATE) AS INVALID_INPUT_DATE
            FROM TB_HIS_APS_VALIDATION_ADD_INFO HAVAI WITH (NOLOCK) 
            WHERE HAV.COMPANY_CD = HAVAI.COMPANY_CD
            AND HAV.BU_CD = HAVAI.BU_CD
            AND HAV.PROD_PART = HAVAI.PROD_PART
            AND HAV.ITEM_CD = HAVAI.ITEM_CD
            AND HAV.PLAN_ID = @{planId}
            AND HAVAI.INVALID_CD = 'JIG_HOLDING_QTY_YN'
            GROUP BY 
            HAVAI.COMPANY_CD
            ,HAVAI.BU_CD
            ,HAVAI.PROD_PART
            ,HAVAI.ITEM_CD
            ,HAVAI.INVALID_CD

        )   HAVAI_JIG_HOLDING_QTY_YN
        -----------------------------------------------------------------------------------------------------------------------------------------------------        
        
      	WHERE HAV.PLAN_ID = @{planId}
		  AND MI.USE_FLAG = 'Y'
		#if($_parameter.prodPart and $_parameter.prodPart != "")
		  AND MC2.CODE_CD IN ('$_parameter.prodPart.replace(",","','")')
		#end
		#if($_parameter.demandYn and $_parameter.demandYn != "")
		  AND HAV.SALES_PLAN_YN = @{demandYn}
		#end
		#if($_parameter.prodOrderFormatYn and $_parameter.prodOrderFormatYn != "")
		  AND HAV.PROD_ORDER_YN = @{prodOrderFormatYn}
		#end
		#if($_parameter.invalidYn == "Y")
		  AND HAV.INVALID_CNT <![CDATA[>]]> 0
		#elseif($_parameter.invalidYn == "N")
		  AND HAV.INVALID_CNT = 0
		#end
		#if($_parameter.itemType and $_parameter.itemType != "")
	      AND MC5.CODE_CD IN ('$_parameter.itemType.replace(",","','")')
	    #end
		#if($_parameter.procurType and $_parameter.procurType != "")
	      AND MC3.CODE_CD IN ('$_parameter.procurType.replace(",","','")')
	    #end
	    #if($_parameter.route and $_parameter.route != "")
		  AND MIP.ROUTING_ID IN ('$_parameter.route.replace(",","','")')
		#end 
		#if($_parameter.itemGroup and $_parameter.itemGroup != "")
		  AND MI.ITEM_GROUP_CD IN ('$_parameter.itemGroup.replace(",","','")')
		#end
		#if($_parameter.item_cd and $_parameter.item_cd != "")
	      AND HAV.ITEM_CD IN ('$_parameter.item_cd.replace(",","','")')
	    #elseif($_parameter.item_nm and $_parameter.item_nm != "")
	      AND (HAV.ITEM_CD LIKE '%'+@{item_nm}+'%' OR MI.ITEM_NM LIKE '%'+@{item_nm}+'%')
	    #end
	</select>
	
	<update id="validChkUpdate" parameterType="map">
		/****** [ aps.planExecute.validChkUpdate ] ******/
		BEGIN
		    exec dbo.USP_TB_HIS_APS_VALIDATION @{GV_COMPANY_CD}, @{GV_BU_CD};
		END
	</update>
	
	<select id="validationChkSelect" parameterType="map" resultType="map">
    	/****** [ aps.planExecute.validationChkSelect ] ******/
	
	/*
	
	APS > 계획실행 >  기준정보 Validation 
	
    Validation Check 버튼 클릭시 
    
     filter 조건에 해당하는 PLAN_ID에 대해 엔진 CB_STATUS_CD가 Complete이 아닌 개수를 조회	

    1 이상일 경우, Validation Check 버튼 실행안됨
	
	*/
	
	WITH TEMP AS (

        SELECT A.COMPANY_CD
        , A.BU_CD
        , A.PLAN_ID
        , A.PROD_PART
        , A.VERSION_ID
        , CB_TASK_CD
        , CB_STATUS_CD
        , COUNT(CASE WHEN CB_STATUS_CD IN ('P','R','E','S') THEN 1 END) OVER(PARTITION BY A.COMPANY_CD, A.BU_CD, A.PROD_PART, A.VERSION_ID, A.CB_TASK_CD) AS CB_STATUS_QTY --CB_STATUS_CD IN ('P','R','E','S') 포함된 개수
        FROM TB_HIS_CONTROL_BOARD_PLAN A WITH(NOLOCK)
        WHERE A.COMPANY_CD = @{GV_COMPANY_CD}
        AND A.BU_CD = @{GV_BU_CD}
        AND A.PLAN_ID = @{planId}

    )

     SELECT SUM(CB_STATUS_QTY) AS QTY_IN_P_R_E_S -- P:Prepared, R:Run, E:Error, S:Scheduled
     FROM TEMP T WITH(NOLOCK)
     GROUP BY T.COMPANY_CD
     ,T.BU_CD
     ,T.PLAN_ID 
    



	</select>
	
	<select id="validationTimeSelect" parameterType="map" resultType="map">
	   /****** [ aps.planExecute.validationTimeSelect ] ******/
	   
	   -- ATTB_1_CD: 오전시간, ATTB_2_CD:오후시간
        SELECT ATTB_1_CD AS START_FROM
            , ATTB_2_CD      AS END_TO
        FROM TB_MST_CODE MC WITH(NOLOCK)
        WHERE MC.GROUP_CD = 'VALIDATION_CHECK_CD'
        AND MC.USE_FLAG = 'Y'
        AND MC.BU_CD = @{GV_BU_CD}
        AND MC.CODE_CD = @{day}
               
	
	</select>
	
</mapper>
