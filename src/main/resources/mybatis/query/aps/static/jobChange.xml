<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="aps.static">

	<select id="measureBucketListSelect" parameterType="map" resultType="map">
		/****** [ aps.static.measureBucketListSelect ] ******/
		SELECT NULL AS ROOT_CD
		     , 'D' + REPLACE(CODE_CD, ' ', '') AS CD
		     , CASE WHEN 'ko' = @{GV_LANG} THEN CODE_NM_KR
	                WHEN 'cn' = @{GV_LANG} THEN CODE_NM_CN
	                ELSE CODE_NM
	           END NM
	         , CODE_CD AS BUCKET_ID
	         , CASE WHEN 'ko' = @{GV_LANG} THEN CODE_NM_KR
	                WHEN 'cn' = @{GV_LANG} THEN CODE_NM_CN
	                ELSE CODE_NM
	           END BUCKET_VAL
	         , NULL AS TYPE
		FROM TB_MST_CODE WITH(NOLOCK)
		WHERE GROUP_CD = 'PROD_ITEM_GROUP_LIST'
		  AND USE_FLAG = 'Y'
		  AND ATTB_1_CD = @{prodPart}
		  AND ATTB_2_CD = @{prodItemGroupMst}
		ORDER BY SORT
	</select>
	
	<select id="jobChangeListSelect" parameterType="map" resultType="map">
		/****** [ aps.static.jobChangeListSelect ] ******/
		WITH W_MAIN AS
		(
			SELECT A1.CODE_CD AS PROD_PART
			     , A1.CODE_NM AS PROD_PART_NM
			     , A2.CODE_CD AS PROD_GROUP
			     , A2.CODE_NM AS PROD_GROUP_NM
			     , A1.BU_CD
			FROM TB_MST_CODE A1 WITH(NOLOCK)
			INNER JOIN TB_MST_CODE A2 WITH(NOLOCK)
			   ON A1.BU_CD = A2.BU_CD
			  AND A1.CODE_CD = A2.ATTB_1_CD
			WHERE A1.GROUP_CD = 'PROD_PART'
			  AND A2.GROUP_CD = 'PROD_ITEM_GROUP_MST'
			  AND A1.USE_FLAG = 'Y'
			  AND A2.USE_FLAG = 'Y'
			  AND A1.CODE_CD = @{prodPart}
			  AND A2.CODE_CD = @{prodItemGroupMst}
			  AND A1.BU_CD = @{GV_BU_CD}
		),
	    W_MEASURE AS 
    	(
    		SELECT CATEGORY_CD
	    	     , CATEGORY_NM
	    	     , CATEGORY_IDX 
	        FROM 
	        (
	        	SELECT NULL AS CATEGORY_CD
	        	     , NULL AS CATEGORY_NM
	        	     , NULL AS CATEGORY_IDX
				#foreach( $meaMap in $_parameter.meaList )
	            UNION ALL 
	            SELECT '$meaMap.CD'
	                 , '$meaMap.NM'
	                 , $foreach.count 
				#end
			) A
	        WHERE CATEGORY_CD IS NOT NULL
    	)
    	SELECT @{prodPart} AS PROD_PART
             , (SELECT CASE WHEN 'ko' = @{GV_LANG} THEN CODE_NM_KR
						    WHEN 'cn' = @{GV_LANG} THEN CODE_NM_CN
					   ELSE CODE_NM
					   END 
             	FROM TB_MST_CODE WITH(NOLOCK)
    			WHERE GROUP_CD = 'PROD_PART' 
    			  AND CODE_CD = @{prodPart}
    			  AND USE_FLAG = 'Y'
    		   ) AS PROD_PART_NM
             , @{prodItemGroupMst} AS PROD_GROUP
             , (SELECT CASE WHEN 'ko' = @{GV_LANG} THEN CODE_NM_KR
						    WHEN 'cn' = @{GV_LANG} THEN CODE_NM_CN
					   ELSE CODE_NM
					   END
    			FROM TB_MST_CODE WITH(NOLOCK)
    			WHERE GROUP_CD = 'PROD_ITEM_GROUP_MST'
    			  AND CODE_CD = @{prodItemGroupMst}
    			  AND USE_FLAG = 'Y'
               ) AS PROD_GROUP_NM
             , @{GV_COMPANY_CD} AS COMPANY_CD
             , @{GV_BU_CD} AS BU_CD
             , A3.CATEGORY_CD
           	 , A3.CATEGORY_NM
           	 , A3.CATEGORY_IDX
			#foreach( $bucketMap in $_parameter.bucketList )
           	 , SUM
           	   (
          	   		CASE
	  				#foreach( $meaMap in $_parameter.meaList )
	                   	WHEN A2.FROM_PROD_GROUP_DET = '${meaMap.CD}' AND A2.TO_PROD_GROUP_DET = '${bucketMap.BUCKET_ID}' THEN ROUND(A2.JC_TIME / 3600.0, 2)
	  				#end
	                   	ELSE NULL
	                END
	            ) AS $bucketMap.CD
           	#end
		FROM W_MEASURE A3
        LEFT OUTER JOIN TB_MST_JOB_CHANGE A2 WITH(NOLOCK)
          ON A3.CATEGORY_CD = A2.FROM_PROD_GROUP_DET
		LEFT OUTER JOIN W_MAIN A1
          ON A1.BU_CD = A2.BU_CD
		 AND A1.PROD_PART = A2.PROD_PART
	     AND A1.PROD_GROUP = A2.PROD_GROUP
	     AND A2.COMPANY_CD = @{GV_COMPANY_CD}
	     AND A2.BU_CD = @{GV_BU_CD}
		GROUP BY A1.PROD_PART, A1.PROD_PART_NM, A1.PROD_GROUP, A1.PROD_GROUP_NM, A1.BU_CD, A3.CATEGORY_CD, A3.CATEGORY_NM, A3.CATEGORY_IDX
	    ORDER BY A3.CATEGORY_IDX
	</select>
	
	<select id="jobChagneAuthoritySelect" parameterType="map" resultType="map">
		/****** [ aps.static.facilityAuthoritySelect ] ******/
		SELECT A2.MENU_CD
		FROM
		(
		  	SELECT BU_CD
		         , ROLE_CD
		  	FROM TB_MAP_USER_ROLE WITH(NOLOCK)
		  	WHERE USER_ID = @{GV_USER_ID}
		      AND BU_CD = @{GV_BU_CD}
		      AND USE_FLAG = 'Y'
		) A1
		INNER JOIN
		(
		  	SELECT COMPANY_CD
		         , BU_CD
		         , ROLE_CD
		         , MENU_CD
		  	FROM TB_MAP_ROLE_MENU_ACTION WITH(NOLOCK)
		  	WHERE COMPANY_CD = @{GV_COMPANY_CD}
		      AND BU_CD = @{GV_BU_CD}
		      AND MENU_CD IN ('APS11001', 'APS11002', 'APS11003', 'APS11004')
		      AND ACTION_CD = 'SAVE'
		      AND USE_FLAG = 'Y'
		) A2
		ON A1.BU_CD = A2.BU_CD
		AND A1.ROLE_CD = A2.ROLE_CD
		GROUP BY A2.MENU_CD
	</select>
	
	<update id="jobChangeListUpdate" parameterType="map">
		/****** [ aps.static.jobChangeListUpdate ] ******/
		BEGIN
		
			DECLARE BUCKET_LIST CURSOR FOR
			#foreach ($bucketMap in $_parameter.BUCKET_LIST)
			#if ($foreach.count != 1)
			  UNION ALL
			#end
			  SELECT '$bucketMap.FROM_PROD_GROUP_DET' AS FROM_PROD_GROUP_DET
			       , '$bucketMap.TO_PROD_GROUP_DET' AS TO_PROD_GROUP_DET
			       ,  CASE WHEN $bucketMap.JC_TIME IS NULL THEN NULL ELSE $bucketMap.JC_TIME * 3600 END JC_TIME
			#end
			
			OPEN BUCKET_LIST
	                
	        DECLARE @FROM_PROD_GROUP_DET  nvarchar(50)
	        DECLARE @TO_PROD_GROUP_DET    nvarchar(50)
	        DECLARE @JC_TIME int
	        
	        FETCH NEXT FROM BUCKET_LIST INTO @FROM_PROD_GROUP_DET, @TO_PROD_GROUP_DET, @JC_TIME
	        
	        WHILE (@@FETCH_STATUS = 0)
	            BEGIN
					IF (@JC_TIME = NULL)
						BEGIN
							UPDATE TB_MST_JOB_CHANGE
							   SET JC_TIME = NULL
							     , UPDATE_ID     = CASE WHEN JC_TIME IS NULL THEN UPDATE_ID ELSE @{GV_USER_ID} END
	                             , UPDATE_DTTM   = CASE WHEN JC_TIME IS NULL THEN UPDATE_DTTM ELSE DBO.UFN_GETDATE() END
	                         WHERE COMPANY_CD    = @{COMPANY_CD}
	                           AND BU_CD         = @{BU_CD}
	                           AND PROD_PART     = @{PROD_PART}
	                           AND PROD_GROUP    = @{PROD_GROUP}
	                           AND FROM_PROD_GROUP_DET = @FROM_PROD_GROUP_DET
	                           AND TO_PROD_GROUP_DET = @TO_PROD_GROUP_DET
						END
					ELSE
						BEGIN
							MERGE TB_MST_JOB_CHANGE AS A
	                        USING (SELECT 'X' AS DUAL) AS B 
	                        ON (   COMPANY_CD    = @{COMPANY_CD}
	                           AND BU_CD         = @{BU_CD}
	                           AND PROD_PART     = @{PROD_PART}
	                           AND PROD_GROUP    = @{PROD_GROUP}
	                           AND FROM_PROD_GROUP_DET = @FROM_PROD_GROUP_DET
	                           AND TO_PROD_GROUP_DET = @TO_PROD_GROUP_DET
	                           )
							WHEN MATCHED THEN
	                        UPDATE
	                           SET JC_TIME = @JC_TIME
	                             , UPDATE_ID   = CASE WHEN JC_TIME = @JC_TIME THEN UPDATE_ID ELSE @{GV_USER_ID} END
	                             , UPDATE_DTTM = CASE WHEN JC_TIME = @JC_TIME THEN UPDATE_DTTM ELSE DBO.UFN_GETDATE() END
							WHEN NOT MATCHED THEN
	                        INSERT 
	                        (
	                        	COMPANY_CD
						      , BU_CD
						      , PROD_PART
						      , PROD_GROUP
						      , FROM_PROD_GROUP_DET
						      , TO_PROD_GROUP_DET
						      , JC_TIME
						      , CREATE_ID
						      , CREATE_DTTM
						      , UPDATE_ID
	                          , UPDATE_DTTM
							) VALUES (
	                            @{COMPANY_CD}
	                          , @{BU_CD}
	                          , @{PROD_PART}
	                          , @{PROD_GROUP}
	                          , @FROM_PROD_GROUP_DET
	                          , @TO_PROD_GROUP_DET
	                          , @JC_TIME
	                          , @{GV_USER_ID}
	                          , DBO.UFN_GETDATE()
	                          , @{GV_USER_ID}
	                          , DBO.UFN_GETDATE()
	                       );
	                      END
					FETCH NEXT FROM BUCKET_LIST INTO @FROM_PROD_GROUP_DET, @TO_PROD_GROUP_DET, @JC_TIME
				END
			CLOSE BUCKET_LIST
			DEALLOCATE BUCKET_LIST
		END;
	</update>
	
</mapper>
 