<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="supply.product">
	<select id="sterillzeReviewListSelect" parameterType="map" resultType="map">
		/****** [ supply.sterillzeReviewListSelect ] ******/
		
		BEGIN
			
			DECLARE @V_PLAN_ID NVARCHAR(8);
			DECLARE @V_START_WEEK NVARCHAR(6);
			DECLARE @V_YYYYMMDD NVARCHAR(8);
			DECLARE @V_FROM_MON NVARCHAR(6);
			DECLARE @V_TO_MON NVARCHAR(8);
			
			SELECT @V_PLAN_ID = PLAN_ID
			     , @V_START_WEEK = START_WEEK
			     , @V_YYYYMMDD = YYYYMMDD
			     , @V_FROM_MON = FROM_MON
			     , @V_TO_MON = TO_MON
	      	FROM
	      	(
				SELECT TOP 1 MPV.PLAN_ID
				     , MPV.START_WEEK
				     , MC.YYYYMMDD
				     , MC.YEARMONTH AS FROM_MON
				     , SUBSTRING(CONVERT(VARCHAR, DATEADD(MM, 12, CONVERT(DATETIME, MC.YEARMONTH + '01')), 112), 1 , 6) AS TO_MON
				FROM TB_MST_PLAN_VERSION MPV WITH(NOLOCK)
				INNER JOIN TB_MST_CALENDAR MC WITH(NOLOCK)
				   ON MC.YEARWEEK = MPV.START_WEEK
				  AND MC.DAY_NM = 'WED'
				WHERE COMPANY_CD = @{GV_COMPANY_CD}
				  AND BU_CD = @{GV_BU_CD}
				  AND PLAN_TYPE_CD = 'DP_W'
				  AND RELEASE_FLAG = 'Y'
				ORDER BY START_WEEK DESC
			) A
			;
			
			WITH W_ITEM AS
			(<include refid="snop.common.t_itemCust" />),
			W_PAST AS
			(
				SELECT COMPANY_CD
				     , BU_CD
				     , ITEM_CD
				     , SUM(CASE WHEN GI_DATE >= CONVERT(VARCHAR, DATEADD(mm, -3, @V_FROM_MON + '01'), 112) THEN QTY END) / 3 AS THREE_MONTH_QTY
				     , SUM(CASE WHEN GI_DATE >= CONVERT(VARCHAR, DATEADD(mm, -3, @V_FROM_MON + '01'), 112) THEN AMT_KRW END) / 3 AS THREE_MONTH_AMT     
				     , SUM(CASE WHEN GI_DATE >= CONVERT(VARCHAR, DATEADD(mm, -6, @V_FROM_MON + '01'), 112) THEN QTY END) / 6 AS SIX_MONTH_QTY
				     , SUM(CASE WHEN GI_DATE >= CONVERT(VARCHAR, DATEADD(mm, -6, @V_FROM_MON + '01'), 112) THEN AMT_KRW END) / 6 AS SIX_MONTH_AMT     
				     , SUM(CASE WHEN GI_DATE >= CONVERT(VARCHAR, DATEADD(mm, -12, @V_FROM_MON + '01'), 112) THEN QTY END) / 12 AS ONE_YEAR_QTY
				     , SUM(CASE WHEN GI_DATE >= CONVERT(VARCHAR, DATEADD(mm, -12, @V_FROM_MON + '01'), 112) THEN AMT_KRW END) / 12 AS ONE_YEAR_AMT     
				FROM TB_DYN_GI WITH(NOLOCK)
				WHERE COMPANY_CD = @{GV_COMPANY_CD}
				  AND BU_CD = @{GV_BU_CD}
				  AND PLANT_CD = 'WF01'
				  AND GI_DATE <![CDATA[>=]]> CONVERT(VARCHAR, DATEADD(mm, -12, @V_FROM_MON + '01'), 112)
				  AND GI_DATE <![CDATA[<]]> @V_FROM_MON + '01'
				  AND DEL_FLAG = 'N'
				GROUP BY COMPANY_CD, BU_CD, ITEM_CD
			),
			W_INVENTORY AS
			(
				SELECT A1.COMPANY_CD
		        	 , A1.BU_CD
		             , A1.ITEM_CD
		             , SUM(CASE WHEN A2.ITEM_TYPE IN ('20', '30') THEN CASE WHEN A1.SL_CD = 'M01' THEN INV_QTY ELSE 0 END
		                        ELSE INV_QTY
		                    END
		                  ) AS INV_QTY
		             , SUM(CASE WHEN A2.ITEM_TYPE IN ('20', '30') THEN CASE WHEN A1.SL_CD = 'M01' THEN INV_AMT_KRW ELSE 0 END
		                        ELSE INV_AMT_KRW
		                    END
		                  ) AS INV_AMT_KRW 
		      FROM UV_DYN_INVENTORY A1 WITH(NOLOCK)
		      INNER JOIN TB_MST_ITEM A2 WITH(NOLOCK)
		         ON A1.COMPANY_CD = A2.COMPANY_CD
		        AND A1.BU_CD = A2.BU_CD
		        AND A1.ITEM_CD = A2.ITEM_CD
		      WHERE A1.COMPANY_CD = @{GV_COMPANY_CD}
		        AND A1.BU_CD = @{GV_BU_CD}  
		        AND A1.PLANT_CD = 'WF01'
		      	AND A1.INV_DATE = @V_YYYYMMDD
		      GROUP BY A1.COMPANY_CD, A1.BU_CD, A1.ITEM_CD, A1.INV_DATE
			),
			W_WIP AS
			(
				SELECT WIP.COMPANY_CD
				     , WIP.BU_CD
				     , WIP.ITEM_CD
				     , SUM(WIP.WIP_QTY) AS WIP_QTY
				     , SUM(WIP.WIP_AMT_KRW) AS WIP_AMT_KRW 
				FROM
				(
					SELECT DWR.COMPANY_CD
                         , DWR.BU_CD
                         , DPOH.ITEM_CD
                         , DWR.WIP_DATE
                         , DWR.REMAIN_QTY AS WIP_QTY
                         , DWR.REMAIN_QTY * MICG.SALES_PRICE_KRW AS WIP_AMT_KRW
                    FROM TB_DYN_WIP_ROUTING DWR WITH(NOLOCK)
                    INNER JOIN TB_DYN_PROD_ORDER_HDR DPOH WITH(NOLOCK)
                       ON DPOH.COMPANY_CD = DWR.COMPANY_CD
                      AND DPOH.BU_CD = DWR.BU_CD
                      AND DPOH.PROD_ORDER_NO = DWR.PROD_ORDER_NO
                    INNER JOIN TB_MST_ITEM MI WITH(NOLOCK)
                       ON MI.COMPANY_CD = DPOH.COMPANY_CD
                      AND MI.BU_CD = DPOH.BU_CD
                      AND MI.ITEM_CD = DPOH.ITEM_CD
                    LEFT OUTER JOIN TB_MST_REP_CUST MRC WITH(NOLOCK)
                      ON MRC.COMPANY_CD = MI.COMPANY_CD
                     AND MRC.BU_CD = MI.BU_CD
                     AND MRC.REP_CUST_CD = MI.REP_CUST_CD
                    LEFT OUTER JOIN TB_MAP_ITEM_CUST_GROUP MICG WITH(NOLOCK)
                      ON MICG.COMPANY_CD = DPOH.COMPANY_CD
                     AND MICG.BU_CD = DPOH.BU_CD
                     AND MICG.ITEM_CD = DPOH.ITEM_CD
                     AND MICG.CUST_GROUP_CD = MRC.CUST_GROUP_CD
					WHERE DWR.COMPANY_CD = @{GV_COMPANY_CD}
                   	  AND DWR.BU_CD = @{GV_BU_CD}
                  	  AND DWR.WIP_DATE = @V_YYYYMMDD
					UNION ALL
					SELECT A1.COMPANY_CD
					  	 , A1.BU_CD
					     , A1.ITEM_CD
					     , A1.INV_DATE
					     , SUM(CASE WHEN A1.SL_CD != 'M01' THEN INV_QTY ELSE 0 END) AS INV_QTY
					     , SUM(CASE WHEN A1.SL_CD != 'M01' THEN INV_AMT_KRW ELSE 0 END) AS INV_AMT_KRW      
					FROM UV_DYN_INVENTORY A1 WITH(NOLOCK)
					INNER JOIN TB_MST_ITEM A2 WITH(NOLOCK)
					   ON A1.COMPANY_CD = A2.COMPANY_CD
					  AND A1.BU_CD = A2.BU_CD
					  AND A1.ITEM_CD = A2.ITEM_CD
					WHERE A1.COMPANY_CD = @{GV_COMPANY_CD}
					  AND A1.BU_CD = @{GV_BU_CD}  
					  AND A1.PLANT_CD = 'WF01'
					  AND A1.INV_DATE = @V_YYYYMMDD
					  AND A2.ITEM_TYPE IN ('20', '30')
					GROUP BY A1.COMPANY_CD, A1.BU_CD, A1.ITEM_CD, A1.INV_DATE
				) WIP
				GROUP BY WIP.COMPANY_CD, WIP.BU_CD, WIP.ITEM_CD
			),
			W_ORDER AS
			(
				SELECT COMPANY_CD
				     , BU_CD
				     , ITEM_CD
				     , SUM(PO_QTY - RCPT_QTY) AS INBOUND_PLAN_QTY 
				     , SUM(PO_PRICE * (PO_QTY - RCPT_QTY)) AS INBOUND_PLAN_AMT
				FROM TB_DYN_PUR_ORDER_DAILY WITH(NOLOCK)
				WHERE COMPANY_CD = @{GV_COMPANY_CD}
				  AND BU_CD = @{GV_BU_CD}
				  AND YYYYMMDD = @V_YYYYMMDD
				  AND PLANT_CD = 'WF01'
				  AND DEL_FLAG = 'N'
	   			  AND ISNULL(CLOSE_YN, 'N') <![CDATA[<>]]> 'Y'
				GROUP BY COMPANY_CD, BU_CD, ITEM_CD
			),
			W_PROD_ORDER AS 
			(
				SELECT COMPANY_CD
				     , BU_CD
				     , ITEM_CD
				     , SUM(PROD_ORDER_QTY) AS PROD_ORDER_QTY
				FROM TB_DYN_PROD_ORDER_HDR_DAILY WITH(NOLOCK)
				WHERE COMPANY_CD = @{GV_COMPANY_CD}
				  AND BU_CD = @{GV_BU_CD}
				  AND YYYYMMDD = @V_YYYYMMDD
				  AND ORDER_STATUS = 'OP'
				  AND DEL_FLAG = 'N'
				GROUP BY COMPANY_CD, BU_CD, ITEM_CD
			),
			W_BOM AS
			(
				SELECT COMPANY_CD
			         , BU_CD
			         , PLANT_CD
			         , PARENT_BOM_NO
			         , PARENT_ITEM_CD AS ITEM_CD
			         , PARENT_ITEM_CD
			         , CHILD_ITEM_CD
			         , CHILD_ITEM_QTY
			         , 1 AS SORT
			    FROM TB_MST_BOM WITH(NOLOCK)
			    UNION ALL
			    SELECT A.COMPANY_CD
			         , A.BU_CD
			         , A.PLANT_CD
			         , A.PARENT_BOM_NO
			         , B.ITEM_CD
			         , A.PARENT_ITEM_CD
			         , A.CHILD_ITEM_CD
			         , CAST(B.CHILD_ITEM_QTY * A.CHILD_ITEM_QTY AS NUMERIC(21, 6)) AS CHILD_ITEM_QTY
			         , B.SORT + 1 AS SORT
			    FROM TB_MST_BOM A WITH(NOLOCK)
			    INNER JOIN W_BOM B
			       ON B.COMPANY_CD = A.COMPANY_CD
			      AND B.BU_CD = A.BU_CD
			      AND B.PLANT_CD = A.PLANT_CD
			      AND B.PARENT_BOM_NO = A.PARENT_BOM_NO
			      AND B.CHILD_ITEM_CD = A.PARENT_ITEM_CD
			),
			W_WEEK_REMAIN AS
			(
				SELECT A1.COMPANY_CD
				     , A1.BU_CD
				     , A1.ITEM_CD
				     , A1.CUST_GROUP_CD
				     , CASE WHEN ISNULL(A1.QTY, 0) - ISNULL(A2.QTY, 0) > 0 THEN ISNULL(A1.QTY, 0) - ISNULL(A2.QTY, 0) ELSE 0 END WEEK_REMAIN_QTY
				FROM
				(
					SELECT COMPANY_CD
					     , BU_CD
					     , ITEM_CD
					     , CUST_GROUP_CD
					     , SUM(QTY) AS QTY
					FROM TB_KPI_SALES_PLAN WITH(NOLOCK)
					WHERE COMPANY_CD = @{GV_COMPANY_CD}
					  AND BU_CD = @{GV_BU_CD}
					  AND MEAS_CD = 'CFM_SP'
					  AND YEARWEEK = @V_START_WEEK
					GROUP BY COMPANY_CD, BU_CD, ITEM_CD, CUST_GROUP_CD
				) A1
				LEFT OUTER JOIN
				(
					SELECT DSR.COMPANY_CD
					     , DSR.BU_CD
					     , DSR.ITEM_CD
					     , TMC.CUST_GROUP_CD
					     , SUM(DSR.QTY) AS QTY
	  				FROM TB_DYN_SALES_RESULT DSR WITH(NOLOCK)
	 				INNER JOIN TB_MST_CALENDAR MC WITH(NOLOCK)
					   ON MC.YYYYMMDD = DSR.SALES_DATE
					  AND MC.YEARWEEK = @V_START_WEEK
					  AND MC.YYYYMMDD <![CDATA[<]]> @V_YYYYMMDD
					INNER JOIN TB_MST_CUSTOMER TMC WITH(NOLOCK)
					   ON DSR.COMPANY_CD = TMC.COMPANY_CD
					  AND DSR.BU_CD = TMC.BU_CD
					  AND DSR.CUST_CD = TMC.CUST_CD
					WHERE DSR.COMPANY_CD = @{GV_COMPANY_CD}
					  AND DSR.BU_CD = @{GV_BU_CD}
					  AND DSR.DEL_FLAG = 'N'
					GROUP BY DSR.COMPANY_CD, DSR.BU_CD, DSR.ITEM_CD, TMC.CUST_GROUP_CD
				) A2
				ON A1.COMPANY_CD = A2.COMPANY_CD
				AND A1.BU_CD = A2.BU_CD
				AND A1.ITEM_CD = A2.ITEM_CD
				AND A1.CUST_GROUP_CD = A2.CUST_GROUP_CD
			),
			W_WEEK_REMAIN_BOM AS
			(
				SELECT A1.COMPANY_CD
                     , A1.BU_CD
                     , A1.ITEM_CD
                     , SUM(A1.WEEK_REMAIN_QTY) AS WEEK_REMAIN_QTY
				FROM
				(
					SELECT A.COMPANY_CD
	                     , A.BU_CD
	                     , A.ITEM_CD
	                     , A.WEEK_REMAIN_QTY
					FROM W_WEEK_REMAIN A WITH(NOLOCK)
					UNION ALL
	                SELECT A.COMPANY_CD
	                     , A.BU_CD
	                     , B.CHILD_ITEM_CD AS ITEM_CD
	                     , A.WEEK_REMAIN_QTY * B.CHILD_ITEM_QTY AS WEEK_REMAIN_QTY
					FROM W_WEEK_REMAIN A WITH(NOLOCK)
	                INNER JOIN W_BOM B WITH(NOLOCK)
	                   ON B.COMPANY_CD = A.COMPANY_CD
	                  AND B.BU_CD = A.BU_CD
	                  AND B.ITEM_CD = A.ITEM_CD
	                  AND EXISTS (
									SELECT 1
	                                FROM TB_MST_ITEM_PLANT MIP WITH(NOLOCK)
	                                WHERE MIP.COMPANY_CD = B.COMPANY_CD
	                                  AND MIP.BU_CD = B.BU_CD
	                                  AND MIP.PLANT_CD = B.PLANT_CD
	                                  AND MIP.ITEM_CD = B.CHILD_ITEM_CD
	                                  AND MIP.PROCUR_TYPE = 'MH'
							     )
				) A1
				GROUP BY A1.COMPANY_CD, A1.BU_CD, A1.ITEM_CD
			),
			W_FUTURE_ORG_DATA AS
			(
			
			
				SELECT B1.COMPANY_CD
				     , B1.BU_CD
				     , B1.ITEM_CD
				     , B1.YEARWEEK
				     , B1.YEARMONTH
				     , SUM(B1.QTY) AS QTY
				FROM
				(
					SELECT A1.*
					     , A2.YEARMONTH
					FROM
					(
						SELECT T1.COMPANY_CD 
					    	 , T1.BU_CD
					       	 , T1.ITEM_CD
					         , T1.YEARPWEEK AS YEARWEEK
					         , T1.QTY
					  	FROM TB_HIS_SALES_PLAN T1 WITH(NOLOCK)
					  	WHERE T1.COMPANY_CD = @{GV_COMPANY_CD}
				  	      AND T1.BU_CD = @{GV_BU_CD}
				  	      AND T1.PLAN_ID = @V_PLAN_ID
					  	  AND T1.MEAS_CD = 'AP2_SP'
				      	  AND T1.YEARWEEK <![CDATA[>]]> @V_START_WEEK
					) A1
					INNER JOIN 
					(
					  	SELECT YEARPWEEK
					         , YEARMONTH
					  	FROM TB_MST_CALENDAR WITH(NOLOCK)
					  	WHERE YEARMONTH <![CDATA[>=]]> @V_FROM_MON
					      AND YEARMONTH <![CDATA[<=]]> @V_TO_MON
					      AND YYYYMMDD <![CDATA[>=]]> @V_YYYYMMDD
					    GROUP BY YEARPWEEK, YEARMONTH
					) A2
					ON A1.YEARWEEK = A2.YEARPWEEK
					UNION ALL
					SELECT A1.*
					     , A2.YEARMONTH
					FROM
					(
					  	SELECT COMPANY_CD
					         , BU_CD
					         , ITEM_CD
					         , PI_WEEK AS YEARWEEK
					         , QTY
					  	FROM TB_DYN_MRP_LATEST WITH(NOLOCK)
					  	WHERE COMPANY_CD = @{GV_COMPANY_CD}
				          AND BU_CD = @{GV_BU_CD}
				          AND PLANT_CD = 'WF01'
					) A1
					INNER JOIN 
					(
					  	SELECT YEARWEEK AS YEARWEEK
					         , YEARMONTH_STD AS YEARMONTH
					  	FROM TB_MST_CALENDAR WITH(NOLOCK)
					  	WHERE YEARMONTH_STD <![CDATA[>=]]> @V_FROM_MON
					      AND YEARMONTH_STD <![CDATA[<=]]> @V_TO_MON
					      AND YYYYMMDD <![CDATA[>=]]> @V_YYYYMMDD
					    GROUP BY YEARWEEK, YEARMONTH_STD
					) A2
					ON A1.YEARWEEK = A2.YEARWEEK
				) B1
				GROUP BY B1.COMPANY_CD, B1.BU_CD, B1.ITEM_CD, B1.YEARWEEK, B1.YEARMONTH
			),
			W_FUTURE_BOM AS
			(
				SELECT C.COMPANY_CD 
				     , C.BU_CD
				     , C.ITEM_CD
				     , SUM(CASE WHEN C.YEARMONTH <![CDATA[>=]]> LEFT(CONVERT(VARCHAR, DATEADD(mm, 1, @V_FROM_MON + '01'), 112), 6)
				                 AND C.YEARMONTH <![CDATA[<=]]> LEFT(CONVERT(VARCHAR, DATEADD(mm, 3, @V_FROM_MON + '01'), 112), 6) 
				                THEN QTY END) / 3 AS FUTURE_THREE_QTY_AVG
				     , SUM(CASE WHEN C.YEARMONTH = @V_FROM_MON THEN QTY END) M0_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 1, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M1_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 2, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M2_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 3, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M3_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 4, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M4_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 5, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M5_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 6, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M6_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 7, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M7_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 8, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M8_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 9, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M9_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 10, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M10_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 11, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M11_QTY
				     , SUM(CASE WHEN C.YEARMONTH = LEFT(CONVERT(VARCHAR, DATEADD(mm, 12, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M12_QTY
				     , SUM(CASE WHEN C.YEARMONTH = @V_FROM_MON THEN QTY END) M0_QTY_CUMULATIVE
				     , SUM(CASE WHEN C.YEARMONTH <![CDATA[>=]]> LEFT(CONVERT(VARCHAR, DATEADD(mm, 1, @V_FROM_MON + '01'), 112), 6) 
				                 AND C.YEARMONTH <![CDATA[<=]]> LEFT(CONVERT(VARCHAR, DATEADD(mm, 3, @V_FROM_MON + '01'), 112), 6) THEN QTY END) M3_QTY_CUMULATIVE
				     , SUM(CASE WHEN C.YEARMONTH <![CDATA[>=]]> LEFT(CONVERT(VARCHAR, DATEADD(mm, 4, @V_FROM_MON + '01'), 112), 6) 
				                 AND C.YEARMONTH <![CDATA[<=]]> @V_TO_MON THEN QTY END) M12_QTY_CUMULATIVE
				FROM
				(
					SELECT A.COMPANY_CD
	                     , A.BU_CD
	                     , A.ITEM_CD
	                     , A.QTY
	                     , A.YEARWEEK
	                     , A.YEARMONTH
					FROM W_FUTURE_ORG_DATA A WITH(NOLOCK)
	                UNION ALL
	                SELECT A.COMPANY_CD
	                     , A.BU_CD
	                     , B.CHILD_ITEM_CD AS ITEM_CD
	                     , A.QTY * B.CHILD_ITEM_QTY AS WEEK_REMAIN_QTY
	                     , A.YEARWEEK
	                     , A.YEARMONTH
	                FROM W_FUTURE_ORG_DATA A WITH(NOLOCK)
	                INNER JOIN W_BOM B WITH(NOLOCK)
	                   ON B.COMPANY_CD = A.COMPANY_CD
	                  AND B.BU_CD = A.BU_CD
	                  AND B.ITEM_CD = A.ITEM_CD
	                  AND EXISTS (
	                               SELECT 1
	                                 FROM TB_MST_ITEM_PLANT MIP WITH(NOLOCK)
	                                WHERE MIP.COMPANY_CD = B.COMPANY_CD
	                                  AND MIP.BU_CD = B.BU_CD
	                                  AND MIP.PLANT_CD = B.PLANT_CD
	                                  AND MIP.ITEM_CD = B.CHILD_ITEM_CD
	                                  AND MIP.PROCUR_TYPE = 'MH'
	                              )
				) C
				GROUP BY C.COMPANY_CD, C.BU_CD, C.ITEM_CD
			)
			SELECT TMP_COL
			      #foreach($dimMap in $_parameter.dimList)
					, ${dimMap.DIM_CD}_NM, $dimMap.DIM_CD 
				  #end
				 , CURRENT_INVENTORY_QTY
				 , CURRENT_INVENTORY_AMT
				 , WIP_INVENTORY_QTY
				 , WIP_INVENTORY_AMT
				 , INBOUND_PLAN_QTY
				 , INBOUND_PLAN_AMT
				 , AVAIL_INVENTORY_QTY
				 , AVAIL_INVENTORY_AMT
				 , M0_QTY
				 , M1_QTY
				 , M2_QTY
				 , M3_QTY
				 , M12_QTY_CUMULATIVE
				 , M0_AMT
				 , M1_AMT
				 , M2_AMT
				 , M3_AMT
				 , M12_AMT_CUMULATIVE
				 , ONE_YEAR_RESUTL_QTY
				 , WORK_QTY
				 , WORK_QTY_FINAL
				 , WORK_AMT
				 , PAST_THREE_MONTH_QTY_AVG
				 , PAST_SIX_MONTH_QTY_AVG
				 , PAST_YEAR_QTY_AVG
				 , AVG_TOT
				 , PAST_THREE_MONTH_AMT_AVG
				 , PAST_SIX_MONTH_AMT_AVG
				 , PAST_YEAR_AMT_AVG
				 , FUTURE_THREE_QTY_AVG
				 , FUTURE_THREE_AMT_AVG
				 , FUTURE_THREE_AVG_RATE
				 , M0_AMT_AVG
				 , M1_AMT_AVG
				 , M2_AMT_AVG
				 , M3_AMT_AVG
				 , M12_AMT_AVG
				 , PROD_ORDER_QTY
				 , PROD_ORDER_AMT
				 , WEEK_REMAIN_QTY
				 , SS_QTY_DISP
				 , SBS_QTY
				 , ISNULL(ABS(CURRENT_INVENTORY_QTY), 0) 
				 + ISNULL(ABS(CURRENT_INVENTORY_AMT), 0)
				 + ISNULL(ABS(WIP_INVENTORY_QTY), 0)
				 + ISNULL(ABS(WIP_INVENTORY_AMT), 0)
				 + ISNULL(ABS(INBOUND_PLAN_QTY), 0)
				 + ISNULL(ABS(INBOUND_PLAN_AMT), 0)
				 + ISNULL(ABS(AVAIL_INVENTORY_QTY), 0)
				 + ISNULL(ABS(AVAIL_INVENTORY_AMT), 0)
				 + ISNULL(ABS(M0_QTY), 0)
				 + ISNULL(ABS(M1_QTY), 0)
				 + ISNULL(ABS(M2_QTY), 0)
				 + ISNULL(ABS(M3_QTY), 0)
				 + ISNULL(ABS(M12_QTY_CUMULATIVE), 0)
				 + ISNULL(ABS(PAST_THREE_MONTH_QTY_AVG), 0)
				 + ISNULL(ABS(PAST_SIX_MONTH_QTY_AVG), 0)
				 + ISNULL(ABS(PAST_YEAR_QTY_AVG), 0)
				 + ISNULL(ABS(PAST_THREE_MONTH_AMT_AVG), 0)
				 + ISNULL(ABS(PAST_SIX_MONTH_AMT_AVG), 0)
				 + ISNULL(ABS(PAST_YEAR_AMT_AVG), 0)
				 + ISNULL(ABS(FUTURE_THREE_QTY_AVG), 0)
				 + ISNULL(ABS(FUTURE_THREE_AVG_RATE), 0)
				 + ISNULL(ABS(M0_AMT_AVG), 0)
				 + ISNULL(ABS(M1_AMT_AVG), 0)
				 + ISNULL(ABS(M2_AMT_AVG), 0)
				 + ISNULL(ABS(M3_AMT_AVG), 0)
				 + ISNULL(ABS(M12_AMT_AVG), 0)
				 AS OMIT_FLAG
			FROM
			(
				SELECT NULL AS TMP_COL
			    	<include refid="include.getCdDimTotal"/>
			    	<include refid="include.getGrpLvlId"/>
			    	 , ROW_NUMBER() OVER(ORDER BY 
						#foreach($dimMap in $_parameter.dimList)
							#if($velocityCount > 1)
								, A.$dimMap.DIM_CD 
							#else
								A.$dimMap.DIM_CD
							#end
						#end
					   ) AS RN
			    	 , SUM(PAST_THREE_MONTH_QTY_AVG) AS PAST_THREE_MONTH_QTY_AVG
				     , SUM(PAST_SIX_MONTH_QTY_AVG) AS PAST_SIX_MONTH_QTY_AVG
				     , SUM(PAST_YEAR_QTY_AVG) AS PAST_YEAR_QTY_AVG
				     , SUM(PAST_THREE_MONTH_QTY_AVG) + SUM(PAST_SIX_MONTH_QTY_AVG) + SUM(PAST_YEAR_QTY_AVG) + SUM(FUTURE_THREE_QTY_AVG) AS AVG_TOT
				     , SUM(PAST_THREE_MONTH_AMT_AVG) AS PAST_THREE_MONTH_AMT_AVG
				     , SUM(PAST_SIX_MONTH_AMT_AVG) AS PAST_SIX_MONTH_AMT_AVG
				     , SUM(PAST_YEAR_AMT_AVG) AS PAST_YEAR_AMT_AVG
				     , SUM(CURRENT_INVENTORY_QTY) AS CURRENT_INVENTORY_QTY
					 , SUM(CURRENT_INVENTORY_AMT) AS CURRENT_INVENTORY_AMT
					 , SUM(WIP_INVENTORY_QTY) AS WIP_INVENTORY_QTY
					 , SUM(WIP_INVENTORY_AMT) AS WIP_INVENTORY_AMT
					 , SUM(INBOUND_PLAN_QTY) AS INBOUND_PLAN_QTY
					 , SUM(INBOUND_PLAN_AMT) AS INBOUND_PLAN_AMT
					 , SUM(AVAIL_INVENTORY_QTY) AS AVAIL_INVENTORY_QTY
					 , SUM(AVAIL_INVENTORY_AMT) AS AVAIL_INVENTORY_AMT
					 , SUM(FUTURE_THREE_QTY_AVG) AS FUTURE_THREE_QTY_AVG
					 , SUM(FUTURE_THREE_AMT_AVG) AS FUTURE_THREE_AMT_AVG
					 , SUM(M0_QTY) AS M0_QTY
					 , SUM(M1_QTY) AS M1_QTY
					 , SUM(M2_QTY) AS M2_QTY
					 , SUM(M3_QTY) AS M3_QTY
					 , SUM(M12_QTY_CUMULATIVE) AS M12_QTY_CUMULATIVE
					 , SUM(ONE_YEAR_RESUTL_QTY) AS ONE_YEAR_RESUTL_QTY
					 , SUM(WORK_QTY) AS WORK_QTY
					 , SUM(WORK_QTY_FINAL) AS WORK_QTY_FINAL
					 , SUM(WORK_AMT) AS WORK_AMT
					 , SUM(M0_AMT) AS M0_AMT
					 , SUM(M1_AMT) AS M1_AMT
					 , SUM(M2_AMT) AS M2_AMT
					 , SUM(M3_AMT) AS M3_AMT
					 , SUM(M12_AMT_CUMULATIVE) AS M12_AMT_CUMULATIVE
					 , SUM(PROD_ORDER_QTY) AS PROD_ORDER_QTY
					 , SUM(PROD_ORDER_AMT) AS PROD_ORDER_AMT
					 , SUM(WEEK_REMAIN_QTY) AS WEEK_REMAIN_QTY
					 , SUM(SS_QTY_DISP) AS SS_QTY_DISP
					 , SUM(SBS_QTY) AS SBS_QTY
					#if($_parameter.variationFilter == "M-12")
					 , SUM(FUTURE_THREE_AMT_AVG) / NULLIF(SUM(PAST_YEAR_AMT_AVG), 0) * 100 AS FUTURE_THREE_AVG_RATE
					 , SUM(M0_AMT) / NULLIF(SUM(PAST_YEAR_AMT_AVG), 0) * 100 AS M0_AMT_AVG  
					 , SUM(M1_AMT) / NULLIF(SUM(PAST_YEAR_AMT_AVG), 0) * 100 AS M1_AMT_AVG  
					 , SUM(M2_AMT) / NULLIF(SUM(PAST_YEAR_AMT_AVG), 0) * 100 AS M2_AMT_AVG  
					 , SUM(M3_AMT) / NULLIF(SUM(PAST_YEAR_AMT_AVG), 0) * 100 AS M3_AMT_AVG  
					 , SUM(M12_AMT_CUMULATIVE) / NULLIF(SUM(PAST_YEAR_AMT_AVG), 0) * 100 AS M12_AMT_AVG
					#elseif($_parameter.variationFilter == "M-6")
					 , SUM(FUTURE_THREE_AMT_AVG) / NULLIF(SUM(PAST_SIX_MONTH_AMT_AVG), 0) * 100 AS FUTURE_THREE_AVG_RATE  
					 , SUM(M0_AMT) / NULLIF(SUM(PAST_SIX_MONTH_AMT_AVG), 0) * 100 AS M0_AMT_AVG  
					 , SUM(M1_AMT) / NULLIF(SUM(PAST_SIX_MONTH_AMT_AVG), 0) * 100 AS M1_AMT_AVG  
					 , SUM(M2_AMT) / NULLIF(SUM(PAST_SIX_MONTH_AMT_AVG), 0) * 100 AS M2_AMT_AVG  
					 , SUM(M3_AMT) / NULLIF(SUM(PAST_SIX_MONTH_AMT_AVG), 0) * 100 AS M3_AMT_AVG  
					 , SUM(M12_AMT_CUMULATIVE) / NULLIF(SUM(PAST_SIX_MONTH_AMT_AVG), 0) * 100 AS M12_AMT_AVG
					#elseif($_parameter.variationFilter == "M-3")
					 , SUM(FUTURE_THREE_AMT_AVG) / NULLIF(SUM(PAST_THREE_MONTH_AMT_AVG), 0) * 100 AS FUTURE_THREE_AVG_RATE  
					 , SUM(M0_AMT) / NULLIF(SUM(PAST_THREE_MONTH_AMT_AVG), 0) * 100 AS M0_AMT_AVG  
					 , SUM(M1_AMT) / NULLIF(SUM(PAST_THREE_MONTH_AMT_AVG), 0) * 100 AS M1_AMT_AVG  
					 , SUM(M2_AMT) / NULLIF(SUM(PAST_THREE_MONTH_AMT_AVG), 0) * 100 AS M2_AMT_AVG  
					 , SUM(M3_AMT) / NULLIF(SUM(PAST_THREE_MONTH_AMT_AVG), 0) * 100 AS M3_AMT_AVG  
					 , SUM(M12_AMT_CUMULATIVE) / NULLIF(SUM(PAST_THREE_MONTH_AMT_AVG), 0) * 100 AS M12_AMT_AVG
					#end
			    FROM
			    (
					SELECT T1.COMPANY_CD
					     , T1.BU_CD
					     , ISNULL(T1.ITEM_GROUP_CD, ' ') AS ITEM_GROUP_CD
					     , ISNULL(T1.ITEM_GROUP_CD, ' ') AS ITEM_GROUP_CD_NM
					     , ISNULL(T1.ITEM_GROUP_NM, ' ') AS ITEM_GROUP_NM
					     , ISNULL(T1.ITEM_GROUP_NM, ' ') AS ITEM_GROUP_NM_NM
					     , ISNULL(T1.ITEM_CD, ' ') AS ITEM_CD 			      
					     , ISNULL(T1.ITEM_CD, ' ') AS ITEM_CD_NM 	
					     , ISNULL(T1.ITEM_NM, ' ') AS ITEM_NM 			      
					     , ISNULL(T1.ITEM_NM, ' ') AS ITEM_NM_NM
					     , ISNULL(T1.ITEM_TYPE, ' ') AS ITEM_TYPE_CD
					     , ISNULL(T1.ITEM_TYPE, ' ') AS ITEM_TYPE_CD_NM
					     , ISNULL(T1.ITEM_TYPE_NM, ' ') AS ITEM_TYPE_NM
					     , ISNULL(T1.ITEM_TYPE_NM , ' ') AS ITEM_TYPE_NM_NM
					     , ISNULL(T1.SPEC, ' ') AS SPEC
					     , ISNULL(T1.SPEC, ' ') AS SPEC_NM
					     , ISNULL(T1.DRAW_NO, ' ') AS DRAW_NO
					     , ISNULL(T1.DRAW_NO, ' ') AS DRAW_NO_NM
					     , ISNULL(T1.ROUTING_ID, ' ') AS ROUTING_ID 
					     , ISNULL(T1.ROUTING_ID, ' ') AS ROUTING_ID_NM 
					     , ISNULL(T1.REP_CUST_GROUP_CD, ' ') AS REP_CUST_GROUP_CD
					     , ISNULL(T1.REP_CUST_GROUP_CD, ' ') AS REP_CUST_GROUP_CD_NM
					     , ISNULL(T1.REP_CUST_GROUP_NM, ' ') AS REP_CUST_GROUP_NM
					     , ISNULL(T1.REP_CUST_GROUP_NM, ' ') AS REP_CUST_GROUP_NM_NM
					     , ISNULL(T1.CUST_GROUP_CD, ' ') AS CUST_GROUP_CD
					     , ISNULL(T1.CUST_GROUP_CD, ' ') AS CUST_GROUP_CD_NM     
					     , ISNULL(T1.CUST_GROUP_NM, ' ') AS CUST_GROUP_NM     
					     , ISNULL(T1.CUST_GROUP_NM, ' ') AS CUST_GROUP_NM_NM
					     , ISNULL(T1.SALES_ORG_LVL4_CD, ' ') AS SALES_ORG_LVL4_CD
					     , ISNULL(T1.SALES_ORG_LVL4_CD, ' ') AS SALES_ORG_LVL4_CD_NM
					     , ISNULL(T1.SALES_ORG_LVL4_NM, ' ') AS SALES_ORG_LVL4_NM
					     , ISNULL(T1.SALES_ORG_LVL4_NM, ' ') AS SALES_ORG_LVL4_NM_NM
					     , ISNULL(T1.SALES_ORG_LVL5_CD, ' ') AS SALES_ORG_LVL5_CD
					     , ISNULL(T1.SALES_ORG_LVL5_CD, ' ') AS SALES_ORG_LVL5_CD_NM
					     , ISNULL(T1.SALES_ORG_LVL5_NM, ' ') AS SALES_ORG_LVL5_NM
					     , ISNULL(T1.SALES_ORG_LVL5_NM, ' ') AS SALES_ORG_LVL5_NM_NM
					     , ISNULL(T1.REP_ITEM_GROUP_CD, ' ') AS REP_ITEM_GROUP_CD
					     , ISNULL(T1.REP_ITEM_GROUP_CD, ' ') AS REP_ITEM_GROUP_CD_NM
					     , ISNULL(T1.REP_ITEM_GROUP_NM, ' ') AS REP_ITEM_GROUP_NM
					     , ISNULL(T1.REP_ITEM_GROUP_NM, ' ') AS REP_ITEM_GROUP_NM_NM
					     , ISNULL(T1.UOM_CD, ' ') AS UOM_CD
					     , ISNULL(T1.UOM_CD, ' ') AS UOM_CD_NM
					     , ISNULL(T1.MFG_LT, ' ') AS MFG_LT
					     , ISNULL(T1.MFG_LT, ' ') AS MFG_LT_NM
					     , ISNULL(T1.PUR_LT, ' ') AS PUR_LT
					     , ISNULL(T1.PUR_LT, ' ') AS PUR_LT_NM
					     , ISNULL(CAST(T1.SALES_PRICE_KRW AS NVARCHAR(20)), ' ') AS SALES_PRICE_KRW
		                 , ISNULL(CAST(T1.SALES_PRICE_KRW AS NVARCHAR(20)), ' ') AS SALES_PRICE_KRW_NM
					     , T2.THREE_MONTH_QTY AS PAST_THREE_MONTH_QTY_AVG
					     , T2.THREE_MONTH_AMT AS PAST_THREE_MONTH_AMT_AVG 
					     , T2.SIX_MONTH_QTY AS PAST_SIX_MONTH_QTY_AVG
					     , T2.SIX_MONTH_AMT AS PAST_SIX_MONTH_AMT_AVG 
					     , T2.ONE_YEAR_QTY AS PAST_YEAR_QTY_AVG
					     , T2.ONE_YEAR_AMT AS PAST_YEAR_AMT_AVG 
					     , T3.INV_QTY AS CURRENT_INVENTORY_QTY
					     , (CASE WHEN SALES_PRICE_KRW IS NULL THEN INV_AMT_KRW ELSE SALES_PRICE_KRW  * T3.INV_QTY END) AS CURRENT_INVENTORY_AMT
						 , T4.WIP_QTY AS WIP_INVENTORY_QTY
						 , T4.WIP_AMT_KRW AS WIP_INVENTORY_AMT 
						 , T5.INBOUND_PLAN_QTY AS INBOUND_PLAN_QTY
						 , T5.INBOUND_PLAN_AMT AS INBOUND_PLAN_AMT 
						 , ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T5.INBOUND_PLAN_QTY, 0) AS AVAIL_INVENTORY_QTY
						 , ISNULL((CASE WHEN SALES_PRICE_KRW IS NULL THEN INV_AMT_KRW ELSE SALES_PRICE_KRW  * T3.INV_QTY END), 0) + ISNULL(T4.WIP_AMT_KRW, 0) + ISNULL(T5.INBOUND_PLAN_AMT, 0) AS AVAIL_INVENTORY_AMT 
						 , FUTURE_THREE_QTY_AVG AS FUTURE_THREE_QTY_AVG
						 , FUTURE_THREE_QTY_AVG * T1.SALES_PRICE_KRW AS FUTURE_THREE_AMT_AVG 
						 , M0_QTY AS M0_QTY
						 , M1_QTY AS M1_QTY
						 , M2_QTY AS M2_QTY
						 , M3_QTY AS M3_QTY
						 , M0_QTY_CUMULATIVE AS M0_QTY_CUMULATIVE
						 , M3_QTY_CUMULATIVE AS M3_QTY_CUMULATIVE
						 , M12_QTY_CUMULATIVE AS M12_QTY_CUMULATIVE
						 , (ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T8.WEEK_REMAIN_QTY, 0)) AS ONE_YEAR_RESUTL_QTY
						 
						  /* 재고 수량 >= 1년 출하계획수량 맞다면 재공수량 그렇지 않다면 1년 출하계획수량 - 가용수량 
						 	재고 수량 = 현재고 + WIP
						 	가용수량 = 현재고
						 	재공수량 = WIP
						 	1년 출하계획수량 = M0 ~ M11
						 */
						 , CASE WHEN (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0) + ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
						 		<![CDATA[>=]]> (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
						 		THEN (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
						 		ELSE (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0) + ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
						    END WORK_QTY
						
						 , CASE WHEN CASE WHEN (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0)+ ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								 		  <![CDATA[>=]]> (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		  THEN (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		  ELSE (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0) + ISNULL(T1.SBS_QTY, 0)+ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								      END <![CDATA[>=]]> 0
								 THEN CASE WHEN (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0)+ ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								 		   <![CDATA[>=]]> (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		   THEN (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		   ELSE (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0) + ISNULL(T1.SBS_QTY, 0)+ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								       END
								 ELSE 0
						 	END WORK_QTY_FINAL
						
						 , CASE WHEN CASE WHEN (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0)+ ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								 		  <![CDATA[>=]]> (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		  THEN (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		  ELSE (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0) + ISNULL(T1.SBS_QTY, 0)+ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								      END <![CDATA[>=]]> 0
								 THEN CASE WHEN (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0)+ ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								 		   <![CDATA[>=]]> (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		   THEN (ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0))
								 		   ELSE (ISNULL(T3.INV_QTY, 0) + ISNULL(T4.WIP_QTY, 0) + ISNULL(T7.PROD_ORDER_QTY, 0)) - ((ISNULL(M0_QTY, 0) + ISNULL(M1_QTY, 0) + ISNULL(M2_QTY, 0) + ISNULL(M3_QTY, 0) + ISNULL(M4_QTY, 0) + ISNULL(M5_QTY, 0) + ISNULL(M6_QTY, 0) + ISNULL(M7_QTY, 0) + ISNULL(M8_QTY, 0) + ISNULL(M9_QTY, 0) + ISNULL(M10_QTY, 0) + ISNULL(M11_QTY, 0) + ISNULL(M12_QTY, 0) + ISNULL(T1.SS_QTY_DISP, 0)+ ISNULL(T1.SBS_QTY, 0) +ISNULL(T8.WEEK_REMAIN_QTY, 0)))
								       END
								 ELSE 0
						 	END * T1.SALES_PRICE_KRW AS WORK_AMT
						 , M0_QTY * T1.SALES_PRICE_KRW AS M0_AMT
						 , M1_QTY * T1.SALES_PRICE_KRW AS M1_AMT
						 , M2_QTY * T1.SALES_PRICE_KRW AS M2_AMT
						 , M3_QTY * T1.SALES_PRICE_KRW AS M3_AMT
						 , M0_QTY_CUMULATIVE * T1.SALES_PRICE_KRW AS M0_AMT_CUMULATIVE
						 , M3_QTY_CUMULATIVE * T1.SALES_PRICE_KRW AS M3_AMT_CUMULATIVE
						 , M12_QTY_CUMULATIVE * T1.SALES_PRICE_KRW AS M12_AMT_CUMULATIVE 
						 , T7.PROD_ORDER_QTY
						 , T7.PROD_ORDER_QTY * T1.SALES_PRICE_KRW AS PROD_ORDER_AMT
						 , T8.WEEK_REMAIN_QTY
						 , T1.SS_QTY_DISP
						 , T1.SBS_QTY
					FROM W_ITEM T1 WITH(NOLOCK)
					LEFT OUTER JOIN W_PAST T2
					  ON T1.COMPANY_CD = T2.COMPANY_CD
					 AND T1.BU_CD = T2.BU_CD
					 AND T1.ITEM_CD = T2.ITEM_CD
					LEFT OUTER JOIN W_INVENTORY T3
					  ON T1.COMPANY_CD = T3.COMPANY_CD
					 AND T1.BU_CD = T3.BU_CD
					 AND T1.ITEM_CD = T3.ITEM_CD
					LEFT OUTER JOIN W_WIP T4
					  ON T1.COMPANY_CD = T4.COMPANY_CD
					 AND T1.BU_CD = T4.BU_CD
					 AND T1.ITEM_CD = T4.ITEM_CD
					LEFT OUTER JOIN W_ORDER T5
					  ON T1.COMPANY_CD = T5.COMPANY_CD
					 AND T1.BU_CD = T5.BU_CD
					 AND T1.ITEM_CD = T5.ITEM_CD
					LEFT OUTER JOIN W_FUTURE_BOM T6
					  ON T1.COMPANY_CD = T6.COMPANY_CD
					 AND T1.BU_CD = T6.BU_CD
					 AND T1.ITEM_CD = T6.ITEM_CD
					LEFT OUTER JOIN W_PROD_ORDER T7
					  ON T1.COMPANY_CD = T7.COMPANY_CD
					 AND T1.BU_CD = T7.BU_CD
					 AND T1.ITEM_CD = T7.ITEM_CD 
					LEFT OUTER JOIN W_WEEK_REMAIN_BOM T8
					  ON T1.COMPANY_CD = T8.COMPANY_CD
					 AND T1.BU_CD = T8.BU_CD
					 AND T1.ITEM_CD = T8.ITEM_CD 
					WHERE T1.ITEM_TYPE NOT IN ('25', '35')
				) A
				WHERE 1 = 1
				#if($_parameter.outboundFilter == "M-3")
				  AND PAST_THREE_MONTH_QTY_AVG IS NULL
				#elseif($_parameter.outboundFilter == "M-6")
				  AND PAST_SIX_MONTH_QTY_AVG IS NULL
				#elseif($_parameter.outboundFilter == "M-12")
				  AND PAST_YEAR_QTY_AVG IS NULL
				#end
				#if($_parameter.invenFilter == "M+0")
				  AND AVAIL_INVENTORY_QTY <![CDATA[>]]> M0_QTY_CUMULATIVE
				#elseif($_parameter.invenFilter == "M+3")
				  AND AVAIL_INVENTORY_QTY <![CDATA[>]]> (M0_QTY_CUMULATIVE + M3_QTY_CUMULATIVE)
				#elseif($_parameter.invenFilter == "M+12")
			  	  AND AVAIL_INVENTORY_QTY <![CDATA[>]]> (M0_QTY_CUMULATIVE + M3_QTY_CUMULATIVE + M12_QTY_CUMULATIVE)
				#end
				GROUP BY ROLLUP (<include refid="include.getCdRollup"/>)
			) B
			WHERE 1 = 1
			#if($_parameter.changeAreaStart and $_parameter.changeAreaStart != "" and $_parameter.changeAreaEnd and $_parameter.changeAreaEnd != "")
			  AND FUTURE_THREE_AVG_RATE BETWEEN '$_parameter.changeAreaStart' AND '$_parameter.changeAreaEnd' 
			#else
				#if($_parameter.changeAreaStart and $_parameter.changeAreaStart != "")
				  AND FUTURE_THREE_AVG_RATE <![CDATA[>=]]> '$_parameter.changeAreaStart'
				#end
				#if($_parameter.changeAreaEnd and $_parameter.changeAreaEnd != "")
				  AND FUTURE_THREE_AVG_RATE <![CDATA[<=]]> '$_parameter.changeAreaEnd'
				#end
			#end
			ORDER BY RN
		
		END;
		
	</select>
	
	
	
	
</mapper>
